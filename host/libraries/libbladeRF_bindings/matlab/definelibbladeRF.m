%% About definelibbladeRF.mlx
% This file defines the MATLAB interface to the library |libbladeRF|.
%
% Commented sections represent C++ functionality that MATLAB cannot automatically define. To include
% functionality, uncomment a section and provide values for &lt;SHAPE&gt;, &lt;DIRECTION&gt;, etc. For more
% information, see <matlab:helpview(fullfile(docroot,'matlab','helptargets.map'),'cpp_define_interface') Define MATLAB Interface for C++ Library>.



%% Setup
% Do not edit this setup section.
function libDef = definelibbladeRF()
libDef = clibgen.LibraryDefinition("libbladeRFData.xml");
%% OutputFolder and Libraries 
libDef.OutputFolder = "/mnt/inoui/src/bladeRF/host/libraries/libbladeRF_bindings/matlab";
libDef.Libraries = "/usr/lib/x86_64-linux-gnu/libbladeRF.so";

%% C++ function type |using bladerf_stream_cb = void *(*)(bladerf *, bladerf_stream *, bladerf_metadata *, void *, size_t, void *)| with MATLAB name |clib.libbladeRF.bladerf_stream_cb| 
addFunctionType(libDef, "using bladerf_stream_cb = void *(*)(bladerf *, bladerf_stream *, bladerf_metadata *, void *, size_t, void *)", "MATLABName", "clib.libbladeRF.bladerf_stream_cb", ...
    "Description", "clib.libbladeRF.bladerf_stream_cb    C++ function type bladerf_stream_cb."); % Modify help description values as needed.

%% C++ class |bladerf| with MATLAB name |clib.libbladeRF.bladerf| 
bladerfDefinition = addClass(libDef, "bladerf", "MATLABName", "clib.libbladeRF.bladerf", ...
    "Description", "clib.libbladeRF.bladerf    Representation of C++ class bladerf."); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf| 
% C++ Signature: bladerf::bladerf(bladerf const & input1)
bladerfConstructor1Definition = addConstructor(bladerfDefinition, ...
    "bladerf::bladerf(bladerf const & input1)", ...
    "Description", "clib.libbladeRF.bladerf Constructor of C++ class bladerf."); % Modify help description values as needed.
defineArgument(bladerfConstructor1Definition, "input1", "clib.libbladeRF.bladerf", "input");
validate(bladerfConstructor1Definition);

%% C++ class constructor for C++ class |bladerf| 
% C++ Signature: bladerf::bladerf()
bladerfConstructor2Definition = addConstructor(bladerfDefinition, ...
    "bladerf::bladerf()", ...
    "Description", "clib.libbladeRF.bladerf Constructor of C++ class bladerf."); % Modify help description values as needed.
validate(bladerfConstructor2Definition);

%% C++ class public data member |_| for C++ class |bladerf| 
% C++ Signature: uint32_t bladerf::_
addProperty(bladerfDefinition, "_", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf."); % Modify help description values as needed.

%% C++ enumeration |bladerf_backend| with MATLAB name |clib.libbladeRF.bladerf_backend| 
addEnumeration(libDef, "bladerf_backend", "int32",...
    [...
      "BLADERF_BACKEND_ANY",...  % 0
      "BLADERF_BACKEND_LINUX",...  % 1
      "BLADERF_BACKEND_LIBUSB",...  % 2
      "BLADERF_BACKEND_CYPRESS",...  % 3
      "BLADERF_BACKEND_DUMMY",...  % 100
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_backend", ...
    "Description", "clib.libbladeRF.bladerf_backend    Representation of C++ enumeration bladerf_backend.", ...
    "EnumerantDescriptions", ...
    [...
      """Don't Care"" -- use any available" + newline + ...
    "                                    backend",...  % BLADERF_BACKEND_ANY
      "Linux kernel driver",...  % BLADERF_BACKEND_LINUX
      "libusb",...  % BLADERF_BACKEND_LIBUSB
      "CyAPI",...  % BLADERF_BACKEND_CYPRESS
      "",...  % BLADERF_BACKEND_DUMMY
    ]); % Modify help description values as needed.

%% C++ class |bladerf_devinfo| with MATLAB name |clib.libbladeRF.bladerf_devinfo| 
bladerf_devinfoDefinition = addClass(libDef, "bladerf_devinfo", "MATLABName", "clib.libbladeRF.bladerf_devinfo", ...
    "Description", "clib.libbladeRF.bladerf_devinfo    Representation of C++ class bladerf_devinfo.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Information about a bladeRF attached to the system"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_devinfo| 
% C++ Signature: bladerf_devinfo::bladerf_devinfo(bladerf_devinfo const & input1)
bladerf_devinfoConstructor1Definition = addConstructor(bladerf_devinfoDefinition, ...
    "bladerf_devinfo::bladerf_devinfo(bladerf_devinfo const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_devinfo Constructor of C++ class bladerf_devinfo."); % Modify help description values as needed.
defineArgument(bladerf_devinfoConstructor1Definition, "input1", "clib.libbladeRF.bladerf_devinfo", "input");
validate(bladerf_devinfoConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_devinfo| 
% C++ Signature: bladerf_devinfo::bladerf_devinfo()
bladerf_devinfoConstructor2Definition = addConstructor(bladerf_devinfoDefinition, ...
    "bladerf_devinfo::bladerf_devinfo()", ...
    "Description", "clib.libbladeRF.bladerf_devinfo Constructor of C++ class bladerf_devinfo."); % Modify help description values as needed.
validate(bladerf_devinfoConstructor2Definition);

%% C++ class public data member |backend| for C++ class |bladerf_devinfo| 
% C++ Signature: bladerf_backend bladerf_devinfo::backend
addProperty(bladerf_devinfoDefinition, "backend", "clib.libbladeRF.bladerf_backend", ...
    "Description", "clib.libbladeRF.bladerf_backend    Data member of C++ class bladerf_devinfo." + newline + ...
    "Backend to use when connecting to" + newline + ...
    "                                           device"); % Modify help description values as needed.

%% C++ class public data member |serial| for C++ class |bladerf_devinfo| 
% C++ Signature: char [33] bladerf_devinfo::serial
addProperty(bladerf_devinfoDefinition, "serial", "clib.array.libbladeRF.Char", [33], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_devinfo."); % Modify help description values as needed.

%% C++ class public data member |usb_bus| for C++ class |bladerf_devinfo| 
% C++ Signature: uint8_t bladerf_devinfo::usb_bus
addProperty(bladerf_devinfoDefinition, "usb_bus", "uint8", ...
    "Description", "uint8    Data member of C++ class bladerf_devinfo." + newline + ...
    "Bus # device is attached to"); % Modify help description values as needed.

%% C++ class public data member |usb_addr| for C++ class |bladerf_devinfo| 
% C++ Signature: uint8_t bladerf_devinfo::usb_addr
addProperty(bladerf_devinfoDefinition, "usb_addr", "uint8", ...
    "Description", "uint8    Data member of C++ class bladerf_devinfo." + newline + ...
    "Device address on bus"); % Modify help description values as needed.

%% C++ class public data member |instance| for C++ class |bladerf_devinfo| 
% C++ Signature: unsigned int bladerf_devinfo::instance
addProperty(bladerf_devinfoDefinition, "instance", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_devinfo." + newline + ...
    "Device instance or ID"); % Modify help description values as needed.

%% C++ class public data member |manufacturer| for C++ class |bladerf_devinfo| 
% C++ Signature: char [33] bladerf_devinfo::manufacturer
addProperty(bladerf_devinfoDefinition, "manufacturer", "clib.array.libbladeRF.Char", [33], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_devinfo." + newline + ...
    "Manufacturer description string"); % Modify help description values as needed.

%% C++ class public data member |product| for C++ class |bladerf_devinfo| 
% C++ Signature: char [33] bladerf_devinfo::product
addProperty(bladerf_devinfoDefinition, "product", "clib.array.libbladeRF.Char", [33], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_devinfo."); % Modify help description values as needed.

%% C++ class |bladerf_backendinfo| with MATLAB name |clib.libbladeRF.bladerf_backendinfo| 
bladerf_backendinfoDefinition = addClass(libDef, "bladerf_backendinfo", "MATLABName", "clib.libbladeRF.bladerf_backendinfo", ...
    "Description", "clib.libbladeRF.bladerf_backendinfo    Representation of C++ class bladerf_backendinfo.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Information about a bladeRF attached to the system"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_backendinfo| 
% C++ Signature: bladerf_backendinfo::bladerf_backendinfo(bladerf_backendinfo const & input1)
bladerf_backendinfoConstructor1Definition = addConstructor(bladerf_backendinfoDefinition, ...
    "bladerf_backendinfo::bladerf_backendinfo(bladerf_backendinfo const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_backendinfo Constructor of C++ class bladerf_backendinfo."); % Modify help description values as needed.
defineArgument(bladerf_backendinfoConstructor1Definition, "input1", "clib.libbladeRF.bladerf_backendinfo", "input");
validate(bladerf_backendinfoConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_backendinfo| 
% C++ Signature: bladerf_backendinfo::bladerf_backendinfo()
bladerf_backendinfoConstructor2Definition = addConstructor(bladerf_backendinfoDefinition, ...
    "bladerf_backendinfo::bladerf_backendinfo()", ...
    "Description", "clib.libbladeRF.bladerf_backendinfo Constructor of C++ class bladerf_backendinfo."); % Modify help description values as needed.
validate(bladerf_backendinfoConstructor2Definition);

%% C++ class public data member |handle_count| for C++ class |bladerf_backendinfo| 
% C++ Signature: int bladerf_backendinfo::handle_count
addProperty(bladerf_backendinfoDefinition, "handle_count", "int32", ...
    "Description", "int32    Data member of C++ class bladerf_backendinfo." + newline + ...
    "Backend handle count"); % Modify help description values as needed.

%% C++ class public data member |handle| for C++ class |bladerf_backendinfo| 
% C++ Signature: int64_t bladerf_backendinfo::handle
addProperty(bladerf_backendinfoDefinition, "handle", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_backendinfo." + newline + ...
    "Backend handle for device"); % Modify help description values as needed.

%% C++ class public data member |lock_count| for C++ class |bladerf_backendinfo| 
% C++ Signature: int bladerf_backendinfo::lock_count
addProperty(bladerf_backendinfoDefinition, "lock_count", "int32", ...
    "Description", "int32    Data member of C++ class bladerf_backendinfo." + newline + ...
    "Backend lock count"); % Modify help description values as needed.

%% C++ class public data member |lock| for C++ class |bladerf_backendinfo| 
% C++ Signature: int64_t bladerf_backendinfo::lock
addProperty(bladerf_backendinfoDefinition, "lock", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_backendinfo." + newline + ...
    "Backend handle for device"); % Modify help description values as needed.

%% C++ class |bladerf_range| with MATLAB name |clib.libbladeRF.bladerf_range| 
bladerf_rangeDefinition = addClass(libDef, "bladerf_range", "MATLABName", "clib.libbladeRF.bladerf_range", ...
    "Description", "clib.libbladeRF.bladerf_range    Representation of C++ class bladerf_range.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Range structure"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_range| 
% C++ Signature: bladerf_range::bladerf_range(bladerf_range const & input1)
bladerf_rangeConstructor1Definition = addConstructor(bladerf_rangeDefinition, ...
    "bladerf_range::bladerf_range(bladerf_range const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_range Constructor of C++ class bladerf_range."); % Modify help description values as needed.
defineArgument(bladerf_rangeConstructor1Definition, "input1", "clib.libbladeRF.bladerf_range", "input");
validate(bladerf_rangeConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_range| 
% C++ Signature: bladerf_range::bladerf_range()
bladerf_rangeConstructor2Definition = addConstructor(bladerf_rangeDefinition, ...
    "bladerf_range::bladerf_range()", ...
    "Description", "clib.libbladeRF.bladerf_range Constructor of C++ class bladerf_range."); % Modify help description values as needed.
validate(bladerf_rangeConstructor2Definition);

%% C++ class public data member |min| for C++ class |bladerf_range| 
% C++ Signature: int64_t bladerf_range::min
addProperty(bladerf_rangeDefinition, "min", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_range." + newline + ...
    "Minimum value"); % Modify help description values as needed.

%% C++ class public data member |max| for C++ class |bladerf_range| 
% C++ Signature: int64_t bladerf_range::max
addProperty(bladerf_rangeDefinition, "max", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_range." + newline + ...
    "Maximum value"); % Modify help description values as needed.

%% C++ class public data member |step| for C++ class |bladerf_range| 
% C++ Signature: int64_t bladerf_range::step
addProperty(bladerf_rangeDefinition, "step", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_range." + newline + ...
    "Step of value"); % Modify help description values as needed.

%% C++ class public data member |scale| for C++ class |bladerf_range| 
% C++ Signature: float bladerf_range::scale
addProperty(bladerf_rangeDefinition, "scale", "single", ...
    "Description", "single    Data member of C++ class bladerf_range." + newline + ...
    "Unit scale"); % Modify help description values as needed.

%% C++ class |bladerf_serial| with MATLAB name |clib.libbladeRF.bladerf_serial| 
bladerf_serialDefinition = addClass(libDef, "bladerf_serial", "MATLABName", "clib.libbladeRF.bladerf_serial", ...
    "Description", "clib.libbladeRF.bladerf_serial    Representation of C++ class bladerf_serial.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Serial number structure"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_serial| 
% C++ Signature: bladerf_serial::bladerf_serial(bladerf_serial const & input1)
bladerf_serialConstructor1Definition = addConstructor(bladerf_serialDefinition, ...
    "bladerf_serial::bladerf_serial(bladerf_serial const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_serial Constructor of C++ class bladerf_serial."); % Modify help description values as needed.
defineArgument(bladerf_serialConstructor1Definition, "input1", "clib.libbladeRF.bladerf_serial", "input");
validate(bladerf_serialConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_serial| 
% C++ Signature: bladerf_serial::bladerf_serial()
bladerf_serialConstructor2Definition = addConstructor(bladerf_serialDefinition, ...
    "bladerf_serial::bladerf_serial()", ...
    "Description", "clib.libbladeRF.bladerf_serial Constructor of C++ class bladerf_serial."); % Modify help description values as needed.
validate(bladerf_serialConstructor2Definition);

%% C++ class public data member |serial| for C++ class |bladerf_serial| 
% C++ Signature: char [33] bladerf_serial::serial
addProperty(bladerf_serialDefinition, "serial", "clib.array.libbladeRF.Char", [33], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_serial."); % Modify help description values as needed.

%% C++ class |bladerf_version| with MATLAB name |clib.libbladeRF.bladerf_version| 
bladerf_versionDefinition = addClass(libDef, "bladerf_version", "MATLABName", "clib.libbladeRF.bladerf_version", ...
    "Description", "clib.libbladeRF.bladerf_version    Representation of C++ class bladerf_version.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Version structure for FPGA, firmware, libbladeRF, and associated utilities"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_version| 
% C++ Signature: bladerf_version::bladerf_version(bladerf_version const & input1)
bladerf_versionConstructor1Definition = addConstructor(bladerf_versionDefinition, ...
    "bladerf_version::bladerf_version(bladerf_version const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_version Constructor of C++ class bladerf_version."); % Modify help description values as needed.
defineArgument(bladerf_versionConstructor1Definition, "input1", "clib.libbladeRF.bladerf_version", "input");
validate(bladerf_versionConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_version| 
% C++ Signature: bladerf_version::bladerf_version()
bladerf_versionConstructor2Definition = addConstructor(bladerf_versionDefinition, ...
    "bladerf_version::bladerf_version()", ...
    "Description", "clib.libbladeRF.bladerf_version Constructor of C++ class bladerf_version."); % Modify help description values as needed.
validate(bladerf_versionConstructor2Definition);

%% C++ class public data member |major| for C++ class |bladerf_version| 
% C++ Signature: uint16_t bladerf_version::major
addProperty(bladerf_versionDefinition, "major", "uint16", ...
    "Description", "uint16    Data member of C++ class bladerf_version." + newline + ...
    "Major version"); % Modify help description values as needed.

%% C++ class public data member |minor| for C++ class |bladerf_version| 
% C++ Signature: uint16_t bladerf_version::minor
addProperty(bladerf_versionDefinition, "minor", "uint16", ...
    "Description", "uint16    Data member of C++ class bladerf_version." + newline + ...
    "Minor version"); % Modify help description values as needed.

%% C++ class public data member |patch| for C++ class |bladerf_version| 
% C++ Signature: uint16_t bladerf_version::patch
addProperty(bladerf_versionDefinition, "patch", "uint16", ...
    "Description", "uint16    Data member of C++ class bladerf_version." + newline + ...
    "Patch version"); % Modify help description values as needed.

%% C++ class public data member |describe| for C++ class |bladerf_version| 
% C++ Signature: char const * bladerf_version::describe
addProperty(bladerf_versionDefinition, "describe", "string", "nullTerminated", ...
    "Description", "string    read-only Data member of C++ class bladerf_version." + newline + ...
    "Version string with any additional suffix" + newline + ...
    "                             information.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "@warning Do not attempt to modify or free()" + newline + ...
    "                                      this string."); % Modify help description values as needed.

%% C++ enumeration |bladerf_fpga_size| with MATLAB name |clib.libbladeRF.bladerf_fpga_size| 
addEnumeration(libDef, "bladerf_fpga_size", "int32",...
    [...
      "BLADERF_FPGA_UNKNOWN",...  % 0
      "BLADERF_FPGA_40KLE",...  % 40
      "BLADERF_FPGA_115KLE",...  % 115
      "BLADERF_FPGA_A4",...  % 49
      "BLADERF_FPGA_A5",...  % 77
      "BLADERF_FPGA_A9",...  % 301
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_fpga_size", ...
    "Description", "clib.libbladeRF.bladerf_fpga_size    Representation of C++ enumeration bladerf_fpga_size.", ...
    "EnumerantDescriptions", ...
    [...
      "Unable to determine FPGA variant",...  % BLADERF_FPGA_UNKNOWN
      "40 kLE FPGA",...  % BLADERF_FPGA_40KLE
      "115 kLE FPGA",...  % BLADERF_FPGA_115KLE
      "49 kLE FPGA (A4)",...  % BLADERF_FPGA_A4
      "77 kLE FPGA (A5)",...  % BLADERF_FPGA_A5
      "301 kLE FPGA (A9)",...  % BLADERF_FPGA_A9
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_dev_speed| with MATLAB name |clib.libbladeRF.bladerf_dev_speed| 
addEnumeration(libDef, "bladerf_dev_speed", "int32",...
    [...
      "BLADERF_DEVICE_SPEED_UNKNOWN",...  % 0
      "BLADERF_DEVICE_SPEED_HIGH",...  % 1
      "BLADERF_DEVICE_SPEED_SUPER",...  % 2
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_dev_speed", ...
    "Description", "clib.libbladeRF.bladerf_dev_speed    Representation of C++ enumeration bladerf_dev_speed."); % Modify help description values as needed.

%% C++ enumeration |bladerf_fpga_source| with MATLAB name |clib.libbladeRF.bladerf_fpga_source| 
addEnumeration(libDef, "bladerf_fpga_source", "int32",...
    [...
      "BLADERF_FPGA_SOURCE_UNKNOWN",...  % 0
      "BLADERF_FPGA_SOURCE_FLASH",...  % 1
      "BLADERF_FPGA_SOURCE_HOST",...  % 2
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_fpga_source", ...
    "Description", "clib.libbladeRF.bladerf_fpga_source    Representation of C++ enumeration bladerf_fpga_source.", ...
    "EnumerantDescriptions", ...
    [...
      "Uninitialized/invalid",...  % BLADERF_FPGA_SOURCE_UNKNOWN
      "Last FPGA load was from flash",...  % BLADERF_FPGA_SOURCE_FLASH
      "Last FPGA load was from host",...  % BLADERF_FPGA_SOURCE_HOST
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_direction| with MATLAB name |clib.libbladeRF.bladerf_direction| 
addEnumeration(libDef, "bladerf_direction", "int32",...
    [...
      "BLADERF_RX",...  % 0
      "BLADERF_TX",...  % 1
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_direction", ...
    "Description", "clib.libbladeRF.bladerf_direction    Representation of C++ enumeration bladerf_direction.", ...
    "EnumerantDescriptions", ...
    [...
      "Receive direction",...  % BLADERF_RX
      "",...  % BLADERF_TX
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_channel_layout| with MATLAB name |clib.libbladeRF.bladerf_channel_layout| 
addEnumeration(libDef, "bladerf_channel_layout", "int32",...
    [...
      "BLADERF_RX_X1",...  % 0
      "BLADERF_TX_X1",...  % 1
      "BLADERF_RX_X2",...  % 2
      "BLADERF_TX_X2",...  % 3
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_channel_layout", ...
    "Description", "clib.libbladeRF.bladerf_channel_layout    Representation of C++ enumeration bladerf_channel_layout.", ...
    "EnumerantDescriptions", ...
    [...
      "x1 RX (SISO)",...  % BLADERF_RX_X1
      "x1 TX (SISO)",...  % BLADERF_TX_X1
      "x2 RX (MIMO)",...  % BLADERF_RX_X2
      "",...  % BLADERF_TX_X2
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_gain_mode| with MATLAB name |clib.libbladeRF.bladerf_gain_mode| 
addEnumeration(libDef, "bladerf_gain_mode", "int32",...
    [...
      "BLADERF_GAIN_DEFAULT",...  % 0
      "BLADERF_GAIN_MGC",...  % 1
      "BLADERF_GAIN_FASTATTACK_AGC",...  % 2
      "BLADERF_GAIN_SLOWATTACK_AGC",...  % 3
      "BLADERF_GAIN_HYBRID_AGC",...  % 4
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_gain_mode", ...
    "Description", "clib.libbladeRF.bladerf_gain_mode    Representation of C++ enumeration bladerf_gain_mode.", ...
    "EnumerantDescriptions", ...
    [...
      "Device-specific default (automatic, when available)",...  % BLADERF_GAIN_DEFAULT
      "Manual gain control",...  % BLADERF_GAIN_MGC
      "Automatic gain control, fast attack (advanced)",...  % BLADERF_GAIN_FASTATTACK_AGC
      "Automatic gain control, slow attack (advanced)",...  % BLADERF_GAIN_SLOWATTACK_AGC
      "Automatic gain control, hybrid attack (advanced)",...  % BLADERF_GAIN_HYBRID_AGC
    ]); % Modify help description values as needed.

%% C++ class |bladerf_gain_modes| with MATLAB name |clib.libbladeRF.bladerf_gain_modes| 
bladerf_gain_modesDefinition = addClass(libDef, "bladerf_gain_modes", "MATLABName", "clib.libbladeRF.bladerf_gain_modes", ...
    "Description", "clib.libbladeRF.bladerf_gain_modes    Representation of C++ class bladerf_gain_modes.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Mapping between C string description of gain modes and bladerf_gain_mode"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_gain_modes| 
% C++ Signature: bladerf_gain_modes::bladerf_gain_modes(bladerf_gain_modes const & input1)
bladerf_gain_modesConstructor1Definition = addConstructor(bladerf_gain_modesDefinition, ...
    "bladerf_gain_modes::bladerf_gain_modes(bladerf_gain_modes const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_gain_modes Constructor of C++ class bladerf_gain_modes."); % Modify help description values as needed.
defineArgument(bladerf_gain_modesConstructor1Definition, "input1", "clib.libbladeRF.bladerf_gain_modes", "input");
validate(bladerf_gain_modesConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_gain_modes| 
% C++ Signature: bladerf_gain_modes::bladerf_gain_modes()
bladerf_gain_modesConstructor2Definition = addConstructor(bladerf_gain_modesDefinition, ...
    "bladerf_gain_modes::bladerf_gain_modes()", ...
    "Description", "clib.libbladeRF.bladerf_gain_modes Constructor of C++ class bladerf_gain_modes."); % Modify help description values as needed.
validate(bladerf_gain_modesConstructor2Definition);

%% C++ class public data member |name| for C++ class |bladerf_gain_modes| 
% C++ Signature: char const * bladerf_gain_modes::name
addProperty(bladerf_gain_modesDefinition, "name", "string", "nullTerminated", ...
    "Description", "string    read-only Data member of C++ class bladerf_gain_modes." + newline + ...
    "Name of gain mode"); % Modify help description values as needed.

%% C++ class public data member |mode| for C++ class |bladerf_gain_modes| 
% C++ Signature: bladerf_gain_mode bladerf_gain_modes::mode
addProperty(bladerf_gain_modesDefinition, "mode", "clib.libbladeRF.bladerf_gain_mode", ...
    "Description", "clib.libbladeRF.bladerf_gain_mode    Data member of C++ class bladerf_gain_modes." + newline + ...
    "Gain mode enumeration"); % Modify help description values as needed.

%% C++ class |bladerf_rational_rate| with MATLAB name |clib.libbladeRF.bladerf_rational_rate| 
bladerf_rational_rateDefinition = addClass(libDef, "bladerf_rational_rate", "MATLABName", "clib.libbladeRF.bladerf_rational_rate", ...
    "Description", "clib.libbladeRF.bladerf_rational_rate    Representation of C++ class bladerf_rational_rate.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Rational sample rate representation" + newline + ...
    "" + newline + ...
    "Sample rates are in the form of" + newline + ...
    "@f[" + newline + ...
    " rate = integer + \frac{num}{den}" + newline + ...
    "@f]"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_rational_rate| 
% C++ Signature: bladerf_rational_rate::bladerf_rational_rate(bladerf_rational_rate const & input1)
bladerf_rational_rateConstructor1Definition = addConstructor(bladerf_rational_rateDefinition, ...
    "bladerf_rational_rate::bladerf_rational_rate(bladerf_rational_rate const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_rational_rate Constructor of C++ class bladerf_rational_rate."); % Modify help description values as needed.
defineArgument(bladerf_rational_rateConstructor1Definition, "input1", "clib.libbladeRF.bladerf_rational_rate", "input");
validate(bladerf_rational_rateConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_rational_rate| 
% C++ Signature: bladerf_rational_rate::bladerf_rational_rate()
bladerf_rational_rateConstructor2Definition = addConstructor(bladerf_rational_rateDefinition, ...
    "bladerf_rational_rate::bladerf_rational_rate()", ...
    "Description", "clib.libbladeRF.bladerf_rational_rate Constructor of C++ class bladerf_rational_rate."); % Modify help description values as needed.
validate(bladerf_rational_rateConstructor2Definition);

%% C++ class public data member |integer| for C++ class |bladerf_rational_rate| 
% C++ Signature: uint64_t bladerf_rational_rate::integer
addProperty(bladerf_rational_rateDefinition, "integer", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_rational_rate." + newline + ...
    "Integer portion"); % Modify help description values as needed.

%% C++ class public data member |num| for C++ class |bladerf_rational_rate| 
% C++ Signature: uint64_t bladerf_rational_rate::num
addProperty(bladerf_rational_rateDefinition, "num", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_rational_rate." + newline + ...
    "Numerator in fractional portion"); % Modify help description values as needed.

%% C++ class public data member |den| for C++ class |bladerf_rational_rate| 
% C++ Signature: uint64_t bladerf_rational_rate::den
addProperty(bladerf_rational_rateDefinition, "den", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_rational_rate." + newline + ...
    "Denominator in fractional portion. This must be" + newline + ...
    "                         greater than 0."); % Modify help description values as needed.

%% C++ enumeration |bladerf_loopback| with MATLAB name |clib.libbladeRF.bladerf_loopback| 
addEnumeration(libDef, "bladerf_loopback", "uint8",...
    [...
      "BLADERF_LB_NONE",...  % 0
      "BLADERF_LB_FIRMWARE",...  % 1
      "BLADERF_LB_BB_TXLPF_RXVGA2",...  % 2
      "BLADERF_LB_BB_TXVGA1_RXVGA2",...  % 3
      "BLADERF_LB_BB_TXLPF_RXLPF",...  % 4
      "BLADERF_LB_BB_TXVGA1_RXLPF",...  % 5
      "BLADERF_LB_RF_LNA1",...  % 6
      "BLADERF_LB_RF_LNA2",...  % 7
      "BLADERF_LB_RF_LNA3",...  % 8
      "BLADERF_LB_RFIC_BIST",...  % 9
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_loopback", ...
    "Description", "clib.libbladeRF.bladerf_loopback    Representation of C++ enumeration bladerf_loopback.", ...
    "EnumerantDescriptions", ...
    [...
      "Disables loopback and returns to normal operation.",...  % BLADERF_LB_NONE
      "Firmware loopback inside of the FX3",...  % BLADERF_LB_FIRMWARE
      "Baseband loopback. TXLPF output is connected to the RXVGA2 input.",...  % BLADERF_LB_BB_TXLPF_RXVGA2
      "Baseband loopback. TXVGA1 output is connected to the RXVGA2 input.",...  % BLADERF_LB_BB_TXVGA1_RXVGA2
      "Baseband loopback. TXLPF output is connected to the RXLPF input.",...  % BLADERF_LB_BB_TXLPF_RXLPF
      "Baseband loopback. TXVGA1 output is connected to RXLPF input.",...  % BLADERF_LB_BB_TXVGA1_RXLPF
      "",...  % BLADERF_LB_RF_LNA1
      "",...  % BLADERF_LB_RF_LNA2
      "",...  % BLADERF_LB_RF_LNA3
      "RFIC digital loopback (built-in self-test)",...  % BLADERF_LB_RFIC_BIST
    ]); % Modify help description values as needed.

%% C++ class |bladerf_loopback_modes| with MATLAB name |clib.libbladeRF.bladerf_loopback_modes| 
bladerf_loopback_modesDefinition = addClass(libDef, "bladerf_loopback_modes", "MATLABName", "clib.libbladeRF.bladerf_loopback_modes", ...
    "Description", "clib.libbladeRF.bladerf_loopback_modes    Representation of C++ class bladerf_loopback_modes.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Mapping of human-readable names to loopback modes"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_loopback_modes| 
% C++ Signature: bladerf_loopback_modes::bladerf_loopback_modes(bladerf_loopback_modes const & input1)
bladerf_loopback_modesConstructor1Definition = addConstructor(bladerf_loopback_modesDefinition, ...
    "bladerf_loopback_modes::bladerf_loopback_modes(bladerf_loopback_modes const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_loopback_modes Constructor of C++ class bladerf_loopback_modes."); % Modify help description values as needed.
defineArgument(bladerf_loopback_modesConstructor1Definition, "input1", "clib.libbladeRF.bladerf_loopback_modes", "input");
validate(bladerf_loopback_modesConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_loopback_modes| 
% C++ Signature: bladerf_loopback_modes::bladerf_loopback_modes()
bladerf_loopback_modesConstructor2Definition = addConstructor(bladerf_loopback_modesDefinition, ...
    "bladerf_loopback_modes::bladerf_loopback_modes()", ...
    "Description", "clib.libbladeRF.bladerf_loopback_modes Constructor of C++ class bladerf_loopback_modes."); % Modify help description values as needed.
validate(bladerf_loopback_modesConstructor2Definition);

%% C++ class public data member |name| for C++ class |bladerf_loopback_modes| 
% C++ Signature: char const * bladerf_loopback_modes::name
addProperty(bladerf_loopback_modesDefinition, "name", "string", "nullTerminated", ...
    "Description", "string    read-only Data member of C++ class bladerf_loopback_modes." + newline + ...
    "Name of loopback mode"); % Modify help description values as needed.

%% C++ class public data member |mode| for C++ class |bladerf_loopback_modes| 
% C++ Signature: bladerf_loopback bladerf_loopback_modes::mode
addProperty(bladerf_loopback_modesDefinition, "mode", "clib.libbladeRF.bladerf_loopback", ...
    "Description", "clib.libbladeRF.bladerf_loopback    Data member of C++ class bladerf_loopback_modes." + newline + ...
    "Loopback mode enumeration"); % Modify help description values as needed.

%% C++ enumeration |bladerf_trigger_role| with MATLAB name |clib.libbladeRF.bladerf_trigger_role| 
addEnumeration(libDef, "bladerf_trigger_role", "int32",...
    [...
      "BLADERF_TRIGGER_ROLE_INVALID",...  % -1
      "BLADERF_TRIGGER_ROLE_DISABLED",...  % 0
      "BLADERF_TRIGGER_ROLE_MASTER",...  % 1
      "BLADERF_TRIGGER_ROLE_SLAVE",...  % 2
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_trigger_role", ...
    "Description", "clib.libbladeRF.bladerf_trigger_role    Representation of C++ enumeration bladerf_trigger_role.", ...
    "EnumerantDescriptions", ...
    [...
      "Invalid role selection",...  % BLADERF_TRIGGER_ROLE_INVALID
      "",...  % BLADERF_TRIGGER_ROLE_DISABLED
      "",...  % BLADERF_TRIGGER_ROLE_MASTER
      "",...  % BLADERF_TRIGGER_ROLE_SLAVE
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_trigger_signal| with MATLAB name |clib.libbladeRF.bladerf_trigger_signal| 
addEnumeration(libDef, "bladerf_trigger_signal", "int32",...
    [...
      "BLADERF_TRIGGER_INVALID",...  % -1
      "BLADERF_TRIGGER_J71_4",...  % 0
      "BLADERF_TRIGGER_J51_1",...  % 1
      "BLADERF_TRIGGER_MINI_EXP_1",...  % 2
      "BLADERF_TRIGGER_USER_0",...  % 128
      "BLADERF_TRIGGER_USER_1",...  % 129
      "BLADERF_TRIGGER_USER_2",...  % 130
      "BLADERF_TRIGGER_USER_3",...  % 131
      "BLADERF_TRIGGER_USER_4",...  % 132
      "BLADERF_TRIGGER_USER_5",...  % 133
      "BLADERF_TRIGGER_USER_6",...  % 134
      "BLADERF_TRIGGER_USER_7",...  % 135
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_trigger_signal", ...
    "Description", "clib.libbladeRF.bladerf_trigger_signal    Representation of C++ enumeration bladerf_trigger_signal.", ...
    "EnumerantDescriptions", ...
    [...
      "Invalid selection",...  % BLADERF_TRIGGER_INVALID
      "J71 pin 4, mini_exp[1] on x40/x115",...  % BLADERF_TRIGGER_J71_4
      "J51 pin 1, mini_exp[1] on xA4/xA5/xA9",...  % BLADERF_TRIGGER_J51_1
      "mini_exp[1], hardware-independent",...  % BLADERF_TRIGGER_MINI_EXP_1
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_0
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_1
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_2
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_3
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_4
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_5
      "Reserved for user SW/HW customizations",...  % BLADERF_TRIGGER_USER_6
      "",...  % BLADERF_TRIGGER_USER_7
    ]); % Modify help description values as needed.

%% C++ class |bladerf_trigger| with MATLAB name |clib.libbladeRF.bladerf_trigger| 
bladerf_triggerDefinition = addClass(libDef, "bladerf_trigger", "MATLABName", "clib.libbladeRF.bladerf_trigger", ...
    "Description", "clib.libbladeRF.bladerf_trigger    Representation of C++ class bladerf_trigger.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Trigger configuration" + newline + ...
    "" + newline + ...
    "It is <b>highly recommended</b> to keep a 1:1 relationship between triggers" + newline + ...
    "in the physical setup and instances of this structure. (i.e., do not re-use" + newline + ...
    "and change the same bladerf_trigger) for multiple triggers.)"); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_trigger| 
% C++ Signature: bladerf_trigger::bladerf_trigger(bladerf_trigger const & input1)
bladerf_triggerConstructor1Definition = addConstructor(bladerf_triggerDefinition, ...
    "bladerf_trigger::bladerf_trigger(bladerf_trigger const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_trigger Constructor of C++ class bladerf_trigger."); % Modify help description values as needed.
defineArgument(bladerf_triggerConstructor1Definition, "input1", "clib.libbladeRF.bladerf_trigger", "input");
validate(bladerf_triggerConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_trigger| 
% C++ Signature: bladerf_trigger::bladerf_trigger()
bladerf_triggerConstructor2Definition = addConstructor(bladerf_triggerDefinition, ...
    "bladerf_trigger::bladerf_trigger()", ...
    "Description", "clib.libbladeRF.bladerf_trigger Constructor of C++ class bladerf_trigger."); % Modify help description values as needed.
validate(bladerf_triggerConstructor2Definition);

%% C++ class public data member |channel| for C++ class |bladerf_trigger| 
% C++ Signature: bladerf_channel bladerf_trigger::channel
addProperty(bladerf_triggerDefinition, "channel", "int32", ...
    "Description", "int32    Data member of C++ class bladerf_trigger." + newline + ...
    "RX/TX channel associated with trigger"); % Modify help description values as needed.

%% C++ class public data member |role| for C++ class |bladerf_trigger| 
% C++ Signature: bladerf_trigger_role bladerf_trigger::role
addProperty(bladerf_triggerDefinition, "role", "clib.libbladeRF.bladerf_trigger_role", ...
    "Description", "clib.libbladeRF.bladerf_trigger_role    Data member of C++ class bladerf_trigger." + newline + ...
    "Role of the device in a trigger chain"); % Modify help description values as needed.

%% C++ class public data member |signal| for C++ class |bladerf_trigger| 
% C++ Signature: bladerf_trigger_signal bladerf_trigger::signal
addProperty(bladerf_triggerDefinition, "signal", "clib.libbladeRF.bladerf_trigger_signal", ...
    "Description", "clib.libbladeRF.bladerf_trigger_signal    Data member of C++ class bladerf_trigger." + newline + ...
    "Pin or signal being used"); % Modify help description values as needed.

%% C++ class public data member |options| for C++ class |bladerf_trigger| 
% C++ Signature: uint64_t bladerf_trigger::options
addProperty(bladerf_triggerDefinition, "options", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_trigger." + newline + ...
    "Reserved field for future options. This" + newline + ...
    "                                      is unused and should be set to 0."); % Modify help description values as needed.

%% C++ enumeration |bladerf_rx_mux| with MATLAB name |clib.libbladeRF.bladerf_rx_mux| 
addEnumeration(libDef, "bladerf_rx_mux", "int32",...
    [...
      "BLADERF_RX_MUX_INVALID",...  % -1
      "BLADERF_RX_MUX_BASEBAND",...  % 0
      "BLADERF_RX_MUX_12BIT_COUNTER",...  % 1
      "BLADERF_RX_MUX_32BIT_COUNTER",...  % 2
      "BLADERF_RX_MUX_DIGITAL_LOOPBACK",...  % 4
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_rx_mux", ...
    "Description", "clib.libbladeRF.bladerf_rx_mux    Representation of C++ enumeration bladerf_rx_mux.", ...
    "EnumerantDescriptions", ...
    [...
      "Invalid RX Mux mode selection",...  % BLADERF_RX_MUX_INVALID
      "Read baseband samples. This is the default mode of operation.",...  % BLADERF_RX_MUX_BASEBAND
      "",...  % BLADERF_RX_MUX_12BIT_COUNTER
      "",...  % BLADERF_RX_MUX_32BIT_COUNTER
      "Read samples from the baseband TX input to the FPGA (from the host)",...  % BLADERF_RX_MUX_DIGITAL_LOOPBACK
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_correction| with MATLAB name |clib.libbladeRF.bladerf_correction| 
addEnumeration(libDef, "bladerf_correction", "int32",...
    [...
      "BLADERF_CORR_DCOFF_I",...  % 0
      "BLADERF_CORR_DCOFF_Q",...  % 1
      "BLADERF_CORR_PHASE",...  % 2
      "BLADERF_CORR_GAIN",...  % 3
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_correction", ...
    "Description", "clib.libbladeRF.bladerf_correction    Representation of C++ enumeration bladerf_correction.", ...
    "EnumerantDescriptions", ...
    [...
      "",...  % BLADERF_CORR_DCOFF_I
      "",...  % BLADERF_CORR_DCOFF_Q
      "",...  % BLADERF_CORR_PHASE
      "",...  % BLADERF_CORR_GAIN
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_format| with MATLAB name |clib.libbladeRF.bladerf_format| 
addEnumeration(libDef, "bladerf_format", "int32",...
    [...
      "BLADERF_FORMAT_SC16_Q11",...  % 0
      "BLADERF_FORMAT_SC16_Q11_META",...  % 1
      "BLADERF_FORMAT_PACKET_META",...  % 2
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_format", ...
    "Description", "clib.libbladeRF.bladerf_format    Representation of C++ enumeration bladerf_format.", ...
    "EnumerantDescriptions", ...
    [...
      "",...  % BLADERF_FORMAT_SC16_Q11
      "",...  % BLADERF_FORMAT_SC16_Q11_META
      "",...  % BLADERF_FORMAT_PACKET_META
    ]); % Modify help description values as needed.

%% C++ class |bladerf_metadata| with MATLAB name |clib.libbladeRF.bladerf_metadata| 
bladerf_metadataDefinition = addClass(libDef, "bladerf_metadata", "MATLABName", "clib.libbladeRF.bladerf_metadata", ...
    "Description", "clib.libbladeRF.bladerf_metadata    Representation of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Sample metadata" + newline + ...
    "" + newline + ...
    "This structure is used in conjunction with the ::BLADERF_FORMAT_SC16_Q11_META" + newline + ...
    "format to TX scheduled bursts or retrieve timestamp information about" + newline + ...
    "received samples."); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_metadata| 
% C++ Signature: bladerf_metadata::bladerf_metadata(bladerf_metadata const & input1)
bladerf_metadataConstructor1Definition = addConstructor(bladerf_metadataDefinition, ...
    "bladerf_metadata::bladerf_metadata(bladerf_metadata const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_metadata Constructor of C++ class bladerf_metadata."); % Modify help description values as needed.
defineArgument(bladerf_metadataConstructor1Definition, "input1", "clib.libbladeRF.bladerf_metadata", "input");
validate(bladerf_metadataConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_metadata| 
% C++ Signature: bladerf_metadata::bladerf_metadata()
bladerf_metadataConstructor2Definition = addConstructor(bladerf_metadataDefinition, ...
    "bladerf_metadata::bladerf_metadata()", ...
    "Description", "clib.libbladeRF.bladerf_metadata Constructor of C++ class bladerf_metadata."); % Modify help description values as needed.
validate(bladerf_metadataConstructor2Definition);

%% C++ class public data member |timestamp| for C++ class |bladerf_metadata| 
% C++ Signature: bladerf_timestamp bladerf_metadata::timestamp
addProperty(bladerf_metadataDefinition, "timestamp", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Free-running FPGA counter that monotonically increases at the sample rate" + newline + ...
    "of the associated channel."); % Modify help description values as needed.

%% C++ class public data member |flags| for C++ class |bladerf_metadata| 
% C++ Signature: uint32_t bladerf_metadata::flags
addProperty(bladerf_metadataDefinition, "flags", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Input bit field to control the behavior of the call that the metadata" + newline + ...
    "structure is passed to. API calls read this field from the provided data" + newline + ...
    "structure, and do not modify it." + newline + ...
    "" + newline + ...
    "Valid flags include" + newline + ...
    " ::BLADERF_META_FLAG_TX_BURST_START," + newline + ...
    " ::BLADERF_META_FLAG_TX_BURST_END," + newline + ...
    " ::BLADERF_META_FLAG_TX_NOW," + newline + ...
    " ::BLADERF_META_FLAG_TX_UPDATE_TIMESTAMP, and" + newline + ...
    " ::BLADERF_META_FLAG_RX_NOW"); % Modify help description values as needed.

%% C++ class public data member |status| for C++ class |bladerf_metadata| 
% C++ Signature: uint32_t bladerf_metadata::status
addProperty(bladerf_metadataDefinition, "status", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Output bit field to denoting the status of transmissions/receptions. API" + newline + ...
    "calls will write this field." + newline + ...
    "" + newline + ...
    "Possible status flags include ::BLADERF_META_STATUS_OVERRUN and" + newline + ...
    "::BLADERF_META_STATUS_UNDERRUN."); % Modify help description values as needed.

%% C++ class public data member |actual_count| for C++ class |bladerf_metadata| 
% C++ Signature: unsigned int bladerf_metadata::actual_count
addProperty(bladerf_metadataDefinition, "actual_count", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "This output parameter is updated to reflect the actual number of" + newline + ...
    "contiguous samples that have been populated in an RX buffer during a" + newline + ...
    "bladerf_sync_rx() call." + newline + ...
    "" + newline + ...
    "This will not be equal to the requested count in the event of a" + newline + ...
    "discontinuity (i.e., when the status field has the" + newline + ...
    "::BLADERF_META_STATUS_OVERRUN flag set). When an overrun occurs, it is" + newline + ...
    "important not to read past the number of samples specified by this value," + newline + ...
    "as the remaining contents of the buffer are undefined." + newline + ...
    "" + newline + ...
    "@note This parameter is not currently used by bladerf_sync_tx()."); % Modify help description values as needed.

%% C++ class public data member |reserved| for C++ class |bladerf_metadata| 
% C++ Signature: uint8_t [32] bladerf_metadata::reserved
addProperty(bladerf_metadataDefinition, "reserved", "clib.array.libbladeRF.UnsignedChar", [32], ... % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
    "Description", "clib.array.libbladeRF.UnsignedChar    Data member of C++ class bladerf_metadata.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Reserved for future use. This is not used by any functions. It is" + newline + ...
    "recommended that users zero out this field."); % Modify help description values as needed.

%% C++ class |bladerf_stream| with MATLAB name |clib.libbladeRF.bladerf_stream| 
bladerf_streamDefinition = addClass(libDef, "bladerf_stream", "MATLABName", "clib.libbladeRF.bladerf_stream", ...
    "Description", "clib.libbladeRF.bladerf_stream    Representation of C++ class bladerf_stream."); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_stream| 
% C++ Signature: bladerf_stream::bladerf_stream(bladerf_stream const & input1)
bladerf_streamConstructor1Definition = addConstructor(bladerf_streamDefinition, ...
    "bladerf_stream::bladerf_stream(bladerf_stream const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_stream Constructor of C++ class bladerf_stream."); % Modify help description values as needed.
defineArgument(bladerf_streamConstructor1Definition, "input1", "clib.libbladeRF.bladerf_stream", "input");
validate(bladerf_streamConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_stream| 
% C++ Signature: bladerf_stream::bladerf_stream()
bladerf_streamConstructor2Definition = addConstructor(bladerf_streamDefinition, ...
    "bladerf_stream::bladerf_stream()", ...
    "Description", "clib.libbladeRF.bladerf_stream Constructor of C++ class bladerf_stream."); % Modify help description values as needed.
validate(bladerf_streamConstructor2Definition);

%% C++ class public data member |_| for C++ class |bladerf_stream| 
% C++ Signature: uint32_t bladerf_stream::_
addProperty(bladerf_streamDefinition, "_", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_stream."); % Modify help description values as needed.

%% C++ enumeration |bladerf_image_type| with MATLAB name |clib.libbladeRF.bladerf_image_type| 
addEnumeration(libDef, "bladerf_image_type", "int32",...
    [...
      "BLADERF_IMAGE_TYPE_INVALID",...  % -1
      "BLADERF_IMAGE_TYPE_RAW",...  % 0
      "BLADERF_IMAGE_TYPE_FIRMWARE",...  % 1
      "BLADERF_IMAGE_TYPE_FPGA_40KLE",...  % 2
      "BLADERF_IMAGE_TYPE_FPGA_115KLE",...  % 3
      "BLADERF_IMAGE_TYPE_FPGA_A4",...  % 4
      "BLADERF_IMAGE_TYPE_FPGA_A9",...  % 5
      "BLADERF_IMAGE_TYPE_CALIBRATION",...  % 6
      "BLADERF_IMAGE_TYPE_RX_DC_CAL",...  % 7
      "BLADERF_IMAGE_TYPE_TX_DC_CAL",...  % 8
      "BLADERF_IMAGE_TYPE_RX_IQ_CAL",...  % 9
      "BLADERF_IMAGE_TYPE_TX_IQ_CAL",...  % 10
      "BLADERF_IMAGE_TYPE_FPGA_A5",...  % 11
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_image_type", ...
    "Description", "clib.libbladeRF.bladerf_image_type    Representation of C++ enumeration bladerf_image_type.", ...
    "EnumerantDescriptions", ...
    [...
      "Used to denote invalid value",...  % BLADERF_IMAGE_TYPE_INVALID
      "Misc. raw data",...  % BLADERF_IMAGE_TYPE_RAW
      "Firmware data",...  % BLADERF_IMAGE_TYPE_FIRMWARE
      "FPGA bitstream for 40 KLE device",...  % BLADERF_IMAGE_TYPE_FPGA_40KLE
      "FPGA bitstream for 115  KLE device",...  % BLADERF_IMAGE_TYPE_FPGA_115KLE
      "FPGA bitstream for A4 device",...  % BLADERF_IMAGE_TYPE_FPGA_A4
      "FPGA bitstream for A9 device",...  % BLADERF_IMAGE_TYPE_FPGA_A9
      "Board calibration",...  % BLADERF_IMAGE_TYPE_CALIBRATION
      "RX DC offset calibration table",...  % BLADERF_IMAGE_TYPE_RX_DC_CAL
      "TX DC offset calibration table",...  % BLADERF_IMAGE_TYPE_TX_DC_CAL
      "RX IQ balance calibration table",...  % BLADERF_IMAGE_TYPE_RX_IQ_CAL
      "TX IQ balance calibration table",...  % BLADERF_IMAGE_TYPE_TX_IQ_CAL
      "",...  % BLADERF_IMAGE_TYPE_FPGA_A5
    ]); % Modify help description values as needed.

%% C++ class |bladerf_image| with MATLAB name |clib.libbladeRF.bladerf_image| 
bladerf_imageDefinition = addClass(libDef, "bladerf_image", "MATLABName", "clib.libbladeRF.bladerf_image", ...
    "Description", "clib.libbladeRF.bladerf_image    Representation of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Image format for backing up and restoring bladeRF flash contents" + newline + ...
    "" + newline + ...
    "The on disk format generated by the bladerf_image_write function is a" + newline + ...
    "serialized version of this structure and its contents. When written to disk," + newline + ...
    "values are converted to big-endian byte order, for ease of reading in a hex" + newline + ...
    "editor." + newline + ...
    "" + newline + ...
    "When creating and using a bladerf_image of type ::BLADERF_IMAGE_TYPE_RAW," + newline + ...
    "the address and length fields must be erase-block aligned."); % Modify help description values as needed.

%% C++ class constructor for C++ class |bladerf_image| 
% C++ Signature: bladerf_image::bladerf_image(bladerf_image const & input1)
bladerf_imageConstructor1Definition = addConstructor(bladerf_imageDefinition, ...
    "bladerf_image::bladerf_image(bladerf_image const & input1)", ...
    "Description", "clib.libbladeRF.bladerf_image Constructor of C++ class bladerf_image."); % Modify help description values as needed.
defineArgument(bladerf_imageConstructor1Definition, "input1", "clib.libbladeRF.bladerf_image", "input");
validate(bladerf_imageConstructor1Definition);

%% C++ class constructor for C++ class |bladerf_image| 
% C++ Signature: bladerf_image::bladerf_image()
bladerf_imageConstructor2Definition = addConstructor(bladerf_imageDefinition, ...
    "bladerf_image::bladerf_image()", ...
    "Description", "clib.libbladeRF.bladerf_image Constructor of C++ class bladerf_image."); % Modify help description values as needed.
validate(bladerf_imageConstructor2Definition);

%% C++ class public data member |magic| for C++ class |bladerf_image| 
% C++ Signature: char [8] bladerf_image::magic
addProperty(bladerf_imageDefinition, "magic", "clib.array.libbladeRF.Char", [8], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Magic value used to identify image file format." + newline + ...
    "" + newline + ...
    "Note that an extra character is added to store a `NUL`-terminator," + newline + ...
    "to allow this field to be printed. This `NUL`-terminator is *NOT" + newline + ...
    "written in the serialized image."); % Modify help description values as needed.

%% C++ class public data member |checksum| for C++ class |bladerf_image| 
% C++ Signature: uint8_t [32] bladerf_image::checksum
addProperty(bladerf_imageDefinition, "checksum", "clib.array.libbladeRF.UnsignedChar", [32], ... % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
    "Description", "clib.array.libbladeRF.UnsignedChar    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "SHA256 checksum of the flash image. This is computed over the entire" + newline + ...
    "image, with this field filled with 0's."); % Modify help description values as needed.

%% C++ class public data member |version| for C++ class |bladerf_image| 
% C++ Signature: bladerf_version bladerf_image::version
addProperty(bladerf_imageDefinition, "version", "clib.libbladeRF.bladerf_version", ...
    "Description", "clib.libbladeRF.bladerf_version    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Image format version. Only the major, minor, and patch fields are" + newline + ...
    "written to the disk; the describe field is not used. The version is" + newline + ...
    "serialized as: [major | minor | patch]"); % Modify help description values as needed.

%% C++ class public data member |timestamp| for C++ class |bladerf_image| 
% C++ Signature: uint64_t bladerf_image::timestamp
addProperty(bladerf_imageDefinition, "timestamp", "uint64", ...
    "Description", "uint64    Data member of C++ class bladerf_image." + newline + ...
    "UTC image timestamp, in seconds since the Unix Epoch"); % Modify help description values as needed.

%% C++ class public data member |serial| for C++ class |bladerf_image| 
% C++ Signature: char [34] bladerf_image::serial
addProperty(bladerf_imageDefinition, "serial", "clib.array.libbladeRF.Char", [34], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Serial number of the device that the image was obtained from. This" + newline + ...
    "field should be all '\0' if irrelevant." + newline + ...
    "" + newline + ...
    "The +1 here is actually extraneous; ::BLADERF_SERIAL_LENGTH already" + newline + ...
    "accounts for a `NUL` terminator. However, this is left here to avoid" + newline + ...
    "breaking backwards compatibility."); % Modify help description values as needed.

%% C++ class public data member |reserved| for C++ class |bladerf_image| 
% C++ Signature: char [128] bladerf_image::reserved
addProperty(bladerf_imageDefinition, "reserved", "clib.array.libbladeRF.Char", [128], ... % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
    "Description", "clib.array.libbladeRF.Char    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Reserved for future metadata. Should be 0's."); % Modify help description values as needed.

%% C++ class public data member |type| for C++ class |bladerf_image| 
% C++ Signature: bladerf_image_type bladerf_image::type
addProperty(bladerf_imageDefinition, "type", "clib.libbladeRF.bladerf_image_type", ...
    "Description", "clib.libbladeRF.bladerf_image_type    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Type of data contained in the image. Serialized as a uint32_t."); % Modify help description values as needed.

%% C++ class public data member |address| for C++ class |bladerf_image| 
% C++ Signature: uint32_t bladerf_image::address
addProperty(bladerf_imageDefinition, "address", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_image.", ...
    "DetailedDescription", "This content is from the external library documentation." + newline + ...
    "" + newline + ...
    "Address of the flash data in this image. A value of `0xffffffff`" + newline + ...
    "implies that this field is left unspecified (i.e., ""don't care"")."); % Modify help description values as needed.

%% C++ class public data member |length| for C++ class |bladerf_image| 
% C++ Signature: uint32_t bladerf_image::length
addProperty(bladerf_imageDefinition, "length", "uint32", ...
    "Description", "uint32    Data member of C++ class bladerf_image." + newline + ...
    "Length of the data contained in the image"); % Modify help description values as needed.

%% C++ class public data member |data| for C++ class |bladerf_image| 
% C++ Signature: int64_t bladerf_image::data
addProperty(bladerf_imageDefinition, "data", "int64", ...
    "Description", "int64    Data member of C++ class bladerf_image."); % Modify help description values as needed.

%% C++ enumeration |bladerf_vctcxo_tamer_mode| with MATLAB name |clib.libbladeRF.bladerf_vctcxo_tamer_mode| 
addEnumeration(libDef, "bladerf_vctcxo_tamer_mode", "int32",...
    [...
      "BLADERF_VCTCXO_TAMER_INVALID",...  % -1
      "BLADERF_VCTCXO_TAMER_DISABLED",...  % 0
      "BLADERF_VCTCXO_TAMER_1_PPS",...  % 1
      "BLADERF_VCTCXO_TAMER_10_MHZ",...  % 2
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_vctcxo_tamer_mode", ...
    "Description", "clib.libbladeRF.bladerf_vctcxo_tamer_mode    Representation of C++ enumeration bladerf_vctcxo_tamer_mode.", ...
    "EnumerantDescriptions", ...
    [...
      "Denotes an invalid selection or state",...  % BLADERF_VCTCXO_TAMER_INVALID
      "Do not attempt to tame the VCTCXO with an input source.",...  % BLADERF_VCTCXO_TAMER_DISABLED
      "Use a 1 pps input source to tame the VCTCXO.",...  % BLADERF_VCTCXO_TAMER_1_PPS
      "Use a 10 MHz input source to tame the VCTCXO.",...  % BLADERF_VCTCXO_TAMER_10_MHZ
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_tuning_mode| with MATLAB name |clib.libbladeRF.bladerf_tuning_mode| 
addEnumeration(libDef, "bladerf_tuning_mode", "int32",...
    [...
      "BLADERF_TUNING_MODE_INVALID",...  % -1
      "BLADERF_TUNING_MODE_HOST",...  % 0
      "BLADERF_TUNING_MODE_FPGA",...  % 1
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_tuning_mode", ...
    "Description", "clib.libbladeRF.bladerf_tuning_mode    Representation of C++ enumeration bladerf_tuning_mode.", ...
    "EnumerantDescriptions", ...
    [...
      "Indicates an invalid mode is set",...  % BLADERF_TUNING_MODE_INVALID
      "",...  % BLADERF_TUNING_MODE_HOST
      "Perform tuning algorithm on the FPGA for faster tuning.",...  % BLADERF_TUNING_MODE_FPGA
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_xb| with MATLAB name |clib.libbladeRF.bladerf_xb| 
addEnumeration(libDef, "bladerf_xb", "int32",...
    [...
      "BLADERF_XB_NONE",...  % 0
      "BLADERF_XB_100",...  % 1
      "BLADERF_XB_200",...  % 2
      "BLADERF_XB_300",...  % 3
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_xb", ...
    "Description", "clib.libbladeRF.bladerf_xb    Representation of C++ enumeration bladerf_xb.", ...
    "EnumerantDescriptions", ...
    [...
      "No expansion boards attached",...  % BLADERF_XB_NONE
      "XB-100 GPIO expansion board." + newline + ...
    "                            This device is not yet supported in" + newline + ...
    "                            libbladeRF, and is here as a placeholder" + newline + ...
    "                            for future support.",...  % BLADERF_XB_100
      "XB-200 Transverter board",...  % BLADERF_XB_200
      "XB-300 Amplifier board",...  % BLADERF_XB_300
    ]); % Modify help description values as needed.

%% C++ enumeration |bladerf_log_level| with MATLAB name |clib.libbladeRF.bladerf_log_level| 
addEnumeration(libDef, "bladerf_log_level", "int32",...
    [...
      "BLADERF_LOG_LEVEL_VERBOSE",...  % 0
      "BLADERF_LOG_LEVEL_DEBUG",...  % 1
      "BLADERF_LOG_LEVEL_INFO",...  % 2
      "BLADERF_LOG_LEVEL_WARNING",...  % 3
      "BLADERF_LOG_LEVEL_ERROR",...  % 4
      "BLADERF_LOG_LEVEL_CRITICAL",...  % 5
      "BLADERF_LOG_LEVEL_SILENT",...  % 6
    ],...
    "MATLABName", "clib.libbladeRF.bladerf_log_level", ...
    "Description", "clib.libbladeRF.bladerf_log_level    Representation of C++ enumeration bladerf_log_level.", ...
    "EnumerantDescriptions", ...
    [...
      "Verbose level logging",...  % BLADERF_LOG_LEVEL_VERBOSE
      "Debug level logging",...  % BLADERF_LOG_LEVEL_DEBUG
      "Information level logging",...  % BLADERF_LOG_LEVEL_INFO
      "Warning level logging",...  % BLADERF_LOG_LEVEL_WARNING
      "Error level logging",...  % BLADERF_LOG_LEVEL_ERROR
      "Fatal error level logging",...  % BLADERF_LOG_LEVEL_CRITICAL
      "No output",...  % BLADERF_LOG_LEVEL_SILENT
    ]); % Modify help description values as needed.

%% C++ function |bladerf_open| with MATLAB name |clib.libbladeRF.bladerf_open|
% C++ Signature: int bladerf_open(bladerf * * device,char const * device_identifier)
bladerf_openDefinition = addFunction(libDef, ...
    "int bladerf_open(bladerf * * device,char const * device_identifier)", ...
    "MATLABName", "clib.libbladeRF.bladerf_open", ...
    "Description", "clib.libbladeRF.bladerf_open Representation of C++ function bladerf_open."); % Modify help description values as needed.
defineArgument(bladerf_openDefinition, "device", "clib.libbladeRF.bladerf", "output", 1);
defineArgument(bladerf_openDefinition, "device_identifier", "string", "input", "nullTerminated");
defineOutput(bladerf_openDefinition, "RetVal", "int32");
validate(bladerf_openDefinition);

%% C++ function |bladerf_close| with MATLAB name |clib.libbladeRF.bladerf_close|
% C++ Signature: void bladerf_close(bladerf * device)
bladerf_closeDefinition = addFunction(libDef, ...
    "void bladerf_close(bladerf * device)", ...
    "MATLABName", "clib.libbladeRF.bladerf_close", ...
    "Description", "clib.libbladeRF.bladerf_close Representation of C++ function bladerf_close."); % Modify help description values as needed.
defineArgument(bladerf_closeDefinition, "device", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
validate(bladerf_closeDefinition);

%% C++ function |bladerf_open_with_devinfo| with MATLAB name |clib.libbladeRF.bladerf_open_with_devinfo|
% C++ Signature: int bladerf_open_with_devinfo(bladerf * * device,bladerf_devinfo * devinfo)
bladerf_open_with_devinfoDefinition = addFunction(libDef, ...
    "int bladerf_open_with_devinfo(bladerf * * device,bladerf_devinfo * devinfo)", ...
    "MATLABName", "clib.libbladeRF.bladerf_open_with_devinfo", ...
    "Description", "clib.libbladeRF.bladerf_open_with_devinfo Representation of C++ function bladerf_open_with_devinfo."); % Modify help description values as needed.
defineArgument(bladerf_open_with_devinfoDefinition, "device", "clib.libbladeRF.bladerf", "output", 1);
defineArgument(bladerf_open_with_devinfoDefinition, "devinfo", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineOutput(bladerf_open_with_devinfoDefinition, "RetVal", "int32");
validate(bladerf_open_with_devinfoDefinition);

%% C++ function |bladerf_get_device_list| with MATLAB name |clib.libbladeRF.bladerf_get_device_list|
% C++ Signature: int bladerf_get_device_list(bladerf_devinfo * * devices)
bladerf_get_device_listDefinition = addFunction(libDef, ...
    "int bladerf_get_device_list(bladerf_devinfo * * devices)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_device_list", ...
    "Description", "clib.libbladeRF.bladerf_get_device_list Representation of C++ function bladerf_get_device_list."); % Modify help description values as needed.
defineArgument(bladerf_get_device_listDefinition, "devices", "clib.libbladeRF.bladerf_devinfo", "output", 1);
defineOutput(bladerf_get_device_listDefinition, "RetVal", "int32");
validate(bladerf_get_device_listDefinition);

%% C++ function |bladerf_free_device_list| with MATLAB name |clib.libbladeRF.bladerf_free_device_list|
% C++ Signature: void bladerf_free_device_list(bladerf_devinfo * devices)
bladerf_free_device_listDefinition = addFunction(libDef, ...
    "void bladerf_free_device_list(bladerf_devinfo * devices)", ...
    "MATLABName", "clib.libbladeRF.bladerf_free_device_list", ...
    "Description", "clib.libbladeRF.bladerf_free_device_list Representation of C++ function bladerf_free_device_list."); % Modify help description values as needed.
defineArgument(bladerf_free_device_listDefinition, "devices", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
validate(bladerf_free_device_listDefinition);

%% C++ function |bladerf_init_devinfo| with MATLAB name |clib.libbladeRF.bladerf_init_devinfo|
% C++ Signature: void bladerf_init_devinfo(bladerf_devinfo * info)
bladerf_init_devinfoDefinition = addFunction(libDef, ...
    "void bladerf_init_devinfo(bladerf_devinfo * info)", ...
    "MATLABName", "clib.libbladeRF.bladerf_init_devinfo", ...
    "Description", "clib.libbladeRF.bladerf_init_devinfo Representation of C++ function bladerf_init_devinfo."); % Modify help description values as needed.
defineArgument(bladerf_init_devinfoDefinition, "info", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
validate(bladerf_init_devinfoDefinition);

%% C++ function |bladerf_get_devinfo| with MATLAB name |clib.libbladeRF.bladerf_get_devinfo|
% C++ Signature: int bladerf_get_devinfo(bladerf * dev,bladerf_devinfo * info)
bladerf_get_devinfoDefinition = addFunction(libDef, ...
    "int bladerf_get_devinfo(bladerf * dev,bladerf_devinfo * info)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_devinfo", ...
    "Description", "clib.libbladeRF.bladerf_get_devinfo Representation of C++ function bladerf_get_devinfo."); % Modify help description values as needed.
defineArgument(bladerf_get_devinfoDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_devinfoDefinition, "info", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineOutput(bladerf_get_devinfoDefinition, "RetVal", "int32");
validate(bladerf_get_devinfoDefinition);

%% C++ function |bladerf_get_backendinfo| with MATLAB name |clib.libbladeRF.bladerf_get_backendinfo|
% C++ Signature: int bladerf_get_backendinfo(bladerf * dev,bladerf_backendinfo * info)
bladerf_get_backendinfoDefinition = addFunction(libDef, ...
    "int bladerf_get_backendinfo(bladerf * dev,bladerf_backendinfo * info)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_backendinfo", ...
    "Description", "clib.libbladeRF.bladerf_get_backendinfo Representation of C++ function bladerf_get_backendinfo."); % Modify help description values as needed.
defineArgument(bladerf_get_backendinfoDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_backendinfoDefinition, "info", "clib.libbladeRF.bladerf_backendinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_backendinfo", or "clib.array.libbladeRF.bladerf_backendinfo"
defineOutput(bladerf_get_backendinfoDefinition, "RetVal", "int32");
validate(bladerf_get_backendinfoDefinition);

%% C++ function |bladerf_get_devinfo_from_str| with MATLAB name |clib.libbladeRF.bladerf_get_devinfo_from_str|
% C++ Signature: int bladerf_get_devinfo_from_str(char const * devstr,bladerf_devinfo * info)
bladerf_get_devinfo_from_strDefinition = addFunction(libDef, ...
    "int bladerf_get_devinfo_from_str(char const * devstr,bladerf_devinfo * info)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_devinfo_from_str", ...
    "Description", "clib.libbladeRF.bladerf_get_devinfo_from_str Representation of C++ function bladerf_get_devinfo_from_str."); % Modify help description values as needed.
defineArgument(bladerf_get_devinfo_from_strDefinition, "devstr", "string", "input", "nullTerminated");
defineArgument(bladerf_get_devinfo_from_strDefinition, "info", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineOutput(bladerf_get_devinfo_from_strDefinition, "RetVal", "int32");
validate(bladerf_get_devinfo_from_strDefinition);

%% C++ function |bladerf_devinfo_matches| with MATLAB name |clib.libbladeRF.bladerf_devinfo_matches|
% C++ Signature: bool bladerf_devinfo_matches(bladerf_devinfo const * a,bladerf_devinfo const * b)
bladerf_devinfo_matchesDefinition = addFunction(libDef, ...
    "bool bladerf_devinfo_matches(bladerf_devinfo const * a,bladerf_devinfo const * b)", ...
    "MATLABName", "clib.libbladeRF.bladerf_devinfo_matches", ...
    "Description", "clib.libbladeRF.bladerf_devinfo_matches Representation of C++ function bladerf_devinfo_matches."); % Modify help description values as needed.
defineArgument(bladerf_devinfo_matchesDefinition, "a", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineArgument(bladerf_devinfo_matchesDefinition, "b", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineOutput(bladerf_devinfo_matchesDefinition, "RetVal", "logical");
validate(bladerf_devinfo_matchesDefinition);

%% C++ function |bladerf_devstr_matches| with MATLAB name |clib.libbladeRF.bladerf_devstr_matches|
% C++ Signature: bool bladerf_devstr_matches(char const * dev_str,bladerf_devinfo * info)
bladerf_devstr_matchesDefinition = addFunction(libDef, ...
    "bool bladerf_devstr_matches(char const * dev_str,bladerf_devinfo * info)", ...
    "MATLABName", "clib.libbladeRF.bladerf_devstr_matches", ...
    "Description", "clib.libbladeRF.bladerf_devstr_matches Representation of C++ function bladerf_devstr_matches."); % Modify help description values as needed.
defineArgument(bladerf_devstr_matchesDefinition, "dev_str", "string", "input", "nullTerminated");
defineArgument(bladerf_devstr_matchesDefinition, "info", "clib.libbladeRF.bladerf_devinfo", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_devinfo", or "clib.array.libbladeRF.bladerf_devinfo"
defineOutput(bladerf_devstr_matchesDefinition, "RetVal", "logical");
validate(bladerf_devstr_matchesDefinition);

%% C++ function |bladerf_backend_str| with MATLAB name |clib.libbladeRF.bladerf_backend_str|
% C++ Signature: char const * bladerf_backend_str(bladerf_backend backend)
bladerf_backend_strDefinition = addFunction(libDef, ...
    "char const * bladerf_backend_str(bladerf_backend backend)", ...
    "MATLABName", "clib.libbladeRF.bladerf_backend_str", ...
    "Description", "clib.libbladeRF.bladerf_backend_str Representation of C++ function bladerf_backend_str."); % Modify help description values as needed.
defineArgument(bladerf_backend_strDefinition, "backend", "clib.libbladeRF.bladerf_backend");
defineOutput(bladerf_backend_strDefinition, "RetVal", "string", "nullTerminated");
validate(bladerf_backend_strDefinition);

%% C++ function |bladerf_set_usb_reset_on_open| with MATLAB name |clib.libbladeRF.bladerf_set_usb_reset_on_open|
% C++ Signature: void bladerf_set_usb_reset_on_open(bool enabled)
bladerf_set_usb_reset_on_openDefinition = addFunction(libDef, ...
    "void bladerf_set_usb_reset_on_open(bool enabled)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_usb_reset_on_open", ...
    "Description", "clib.libbladeRF.bladerf_set_usb_reset_on_open Representation of C++ function bladerf_set_usb_reset_on_open."); % Modify help description values as needed.
defineArgument(bladerf_set_usb_reset_on_openDefinition, "enabled", "logical");
validate(bladerf_set_usb_reset_on_openDefinition);

%% C++ function |bladerf_get_serial| with MATLAB name |clib.libbladeRF.bladerf_get_serial|
% C++ Signature: int bladerf_get_serial(bladerf * dev,char * serial)
%bladerf_get_serialDefinition = addFunction(libDef, ...
%    "int bladerf_get_serial(bladerf * dev,char * serial)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_serial", ...
%    "Description", "clib.libbladeRF.bladerf_get_serial Representation of C++ function bladerf_get_serial."); % Modify help description values as needed.
%defineArgument(bladerf_get_serialDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_serialDefinition, "serial", "clib.array.libbladeRF.Char", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Char","int8","string", or "char"
%defineOutput(bladerf_get_serialDefinition, "RetVal", "int32");
%validate(bladerf_get_serialDefinition);

%% C++ function |bladerf_get_serial_struct| with MATLAB name |clib.libbladeRF.bladerf_get_serial_struct|
% C++ Signature: int bladerf_get_serial_struct(bladerf * dev,bladerf_serial * serial)
bladerf_get_serial_structDefinition = addFunction(libDef, ...
    "int bladerf_get_serial_struct(bladerf * dev,bladerf_serial * serial)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_serial_struct", ...
    "Description", "clib.libbladeRF.bladerf_get_serial_struct Representation of C++ function bladerf_get_serial_struct."); % Modify help description values as needed.
defineArgument(bladerf_get_serial_structDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_serial_structDefinition, "serial", "clib.libbladeRF.bladerf_serial", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_serial", or "clib.array.libbladeRF.bladerf_serial"
defineOutput(bladerf_get_serial_structDefinition, "RetVal", "int32");
validate(bladerf_get_serial_structDefinition);

%% C++ function |bladerf_get_fpga_size| with MATLAB name |clib.libbladeRF.bladerf_get_fpga_size|
% C++ Signature: int bladerf_get_fpga_size(bladerf * dev,int * size)
%bladerf_get_fpga_sizeDefinition = addFunction(libDef, ...
%    "int bladerf_get_fpga_size(bladerf * dev,int * size)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_fpga_size", ...
%    "Description", "clib.libbladeRF.bladerf_get_fpga_size Representation of C++ function bladerf_get_fpga_size."); % Modify help description values as needed.
%defineArgument(bladerf_get_fpga_sizeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_fpga_sizeDefinition, "size", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_fpga_sizeDefinition, "RetVal", "int32");
%validate(bladerf_get_fpga_sizeDefinition);

%% C++ function |bladerf_get_fpga_bytes| with MATLAB name |clib.libbladeRF.bladerf_get_fpga_bytes|
% C++ Signature: int bladerf_get_fpga_bytes(bladerf * dev,size_t * size)
%bladerf_get_fpga_bytesDefinition = addFunction(libDef, ...
%    "int bladerf_get_fpga_bytes(bladerf * dev,size_t * size)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_fpga_bytes", ...
%    "Description", "clib.libbladeRF.bladerf_get_fpga_bytes Representation of C++ function bladerf_get_fpga_bytes."); % Modify help description values as needed.
%defineArgument(bladerf_get_fpga_bytesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_fpga_bytesDefinition, "size", "clib.array.libbladeRF.UnsignedLong", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedLong", or "uint64"
%defineOutput(bladerf_get_fpga_bytesDefinition, "RetVal", "int32");
%validate(bladerf_get_fpga_bytesDefinition);

%% C++ function |bladerf_get_flash_size| with MATLAB name |clib.libbladeRF.bladerf_get_flash_size|
% C++ Signature: int bladerf_get_flash_size(bladerf * dev,uint32_t * size,bool * is_guess)
%bladerf_get_flash_sizeDefinition = addFunction(libDef, ...
%    "int bladerf_get_flash_size(bladerf * dev,uint32_t * size,bool * is_guess)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_flash_size", ...
%    "Description", "clib.libbladeRF.bladerf_get_flash_size Representation of C++ function bladerf_get_flash_size."); % Modify help description values as needed.
%defineArgument(bladerf_get_flash_sizeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_flash_sizeDefinition, "size", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineArgument(bladerf_get_flash_sizeDefinition, "is_guess", "clib.array.libbladeRF.Bool", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Bool", or "logical"
%defineOutput(bladerf_get_flash_sizeDefinition, "RetVal", "int32");
%validate(bladerf_get_flash_sizeDefinition);

%% C++ function |bladerf_fw_version| with MATLAB name |clib.libbladeRF.bladerf_fw_version|
% C++ Signature: int bladerf_fw_version(bladerf * dev,bladerf_version * version)
bladerf_fw_versionDefinition = addFunction(libDef, ...
    "int bladerf_fw_version(bladerf * dev,bladerf_version * version)", ...
    "MATLABName", "clib.libbladeRF.bladerf_fw_version", ...
    "Description", "clib.libbladeRF.bladerf_fw_version Representation of C++ function bladerf_fw_version."); % Modify help description values as needed.
defineArgument(bladerf_fw_versionDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_fw_versionDefinition, "version", "clib.libbladeRF.bladerf_version", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_version", or "clib.array.libbladeRF.bladerf_version"
defineOutput(bladerf_fw_versionDefinition, "RetVal", "int32");
validate(bladerf_fw_versionDefinition);

%% C++ function |bladerf_is_fpga_configured| with MATLAB name |clib.libbladeRF.bladerf_is_fpga_configured|
% C++ Signature: int bladerf_is_fpga_configured(bladerf * dev)
bladerf_is_fpga_configuredDefinition = addFunction(libDef, ...
    "int bladerf_is_fpga_configured(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_is_fpga_configured", ...
    "Description", "clib.libbladeRF.bladerf_is_fpga_configured Representation of C++ function bladerf_is_fpga_configured."); % Modify help description values as needed.
defineArgument(bladerf_is_fpga_configuredDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_is_fpga_configuredDefinition, "RetVal", "int32");
validate(bladerf_is_fpga_configuredDefinition);

%% C++ function |bladerf_fpga_version| with MATLAB name |clib.libbladeRF.bladerf_fpga_version|
% C++ Signature: int bladerf_fpga_version(bladerf * dev,bladerf_version * version)
bladerf_fpga_versionDefinition = addFunction(libDef, ...
    "int bladerf_fpga_version(bladerf * dev,bladerf_version * version)", ...
    "MATLABName", "clib.libbladeRF.bladerf_fpga_version", ...
    "Description", "clib.libbladeRF.bladerf_fpga_version Representation of C++ function bladerf_fpga_version."); % Modify help description values as needed.
defineArgument(bladerf_fpga_versionDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_fpga_versionDefinition, "version", "clib.libbladeRF.bladerf_version", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_version", or "clib.array.libbladeRF.bladerf_version"
defineOutput(bladerf_fpga_versionDefinition, "RetVal", "int32");
validate(bladerf_fpga_versionDefinition);

%% C++ function |bladerf_get_fpga_source| with MATLAB name |clib.libbladeRF.bladerf_get_fpga_source|
% C++ Signature: int bladerf_get_fpga_source(bladerf * dev,int * source)
%bladerf_get_fpga_sourceDefinition = addFunction(libDef, ...
%    "int bladerf_get_fpga_source(bladerf * dev,int * source)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_fpga_source", ...
%    "Description", "clib.libbladeRF.bladerf_get_fpga_source Representation of C++ function bladerf_get_fpga_source."); % Modify help description values as needed.
%defineArgument(bladerf_get_fpga_sourceDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_fpga_sourceDefinition, "source", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_fpga_sourceDefinition, "RetVal", "int32");
%validate(bladerf_get_fpga_sourceDefinition);

%% C++ function |bladerf_device_speed| with MATLAB name |clib.libbladeRF.bladerf_device_speed|
% C++ Signature: bladerf_dev_speed bladerf_device_speed(bladerf * dev)
bladerf_device_speedDefinition = addFunction(libDef, ...
    "bladerf_dev_speed bladerf_device_speed(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_device_speed", ...
    "Description", "clib.libbladeRF.bladerf_device_speed Representation of C++ function bladerf_device_speed."); % Modify help description values as needed.
defineArgument(bladerf_device_speedDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_device_speedDefinition, "RetVal", "clib.libbladeRF.bladerf_dev_speed");
validate(bladerf_device_speedDefinition);

%% C++ function |bladerf_get_board_name| with MATLAB name |clib.libbladeRF.bladerf_get_board_name|
% C++ Signature: char const * bladerf_get_board_name(bladerf * dev)
bladerf_get_board_nameDefinition = addFunction(libDef, ...
    "char const * bladerf_get_board_name(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_board_name", ...
    "Description", "clib.libbladeRF.bladerf_get_board_name Representation of C++ function bladerf_get_board_name."); % Modify help description values as needed.
defineArgument(bladerf_get_board_nameDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_get_board_nameDefinition, "RetVal", "string", "nullTerminated");
validate(bladerf_get_board_nameDefinition);

%% C++ function |bladerf_get_channel_count| with MATLAB name |clib.libbladeRF.bladerf_get_channel_count|
% C++ Signature: size_t bladerf_get_channel_count(bladerf * dev,bladerf_direction dir)
bladerf_get_channel_countDefinition = addFunction(libDef, ...
    "size_t bladerf_get_channel_count(bladerf * dev,bladerf_direction dir)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_channel_count", ...
    "Description", "clib.libbladeRF.bladerf_get_channel_count Representation of C++ function bladerf_get_channel_count."); % Modify help description values as needed.
defineArgument(bladerf_get_channel_countDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_channel_countDefinition, "dir", "clib.libbladeRF.bladerf_direction");
defineOutput(bladerf_get_channel_countDefinition, "RetVal", "uint64");
validate(bladerf_get_channel_countDefinition);

%% C++ function |bladerf_set_gain| with MATLAB name |clib.libbladeRF.bladerf_set_gain|
% C++ Signature: int bladerf_set_gain(bladerf * dev,bladerf_channel ch,bladerf_gain gain)
bladerf_set_gainDefinition = addFunction(libDef, ...
    "int bladerf_set_gain(bladerf * dev,bladerf_channel ch,bladerf_gain gain)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_gain", ...
    "Description", "clib.libbladeRF.bladerf_set_gain Representation of C++ function bladerf_set_gain."); % Modify help description values as needed.
defineArgument(bladerf_set_gainDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_gainDefinition, "ch", "int32");
defineArgument(bladerf_set_gainDefinition, "gain", "int32");
defineOutput(bladerf_set_gainDefinition, "RetVal", "int32");
validate(bladerf_set_gainDefinition);

%% C++ function |bladerf_get_gain| with MATLAB name |clib.libbladeRF.bladerf_get_gain|
% C++ Signature: int bladerf_get_gain(bladerf * dev,bladerf_channel ch,bladerf_gain * gain)
%bladerf_get_gainDefinition = addFunction(libDef, ...
%    "int bladerf_get_gain(bladerf * dev,bladerf_channel ch,bladerf_gain * gain)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_gain", ...
%    "Description", "clib.libbladeRF.bladerf_get_gain Representation of C++ function bladerf_get_gain."); % Modify help description values as needed.
%defineArgument(bladerf_get_gainDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_gainDefinition, "ch", "int32");
%defineArgument(bladerf_get_gainDefinition, "gain", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_gainDefinition, "RetVal", "int32");
%validate(bladerf_get_gainDefinition);

%% C++ function |bladerf_set_gain_mode| with MATLAB name |clib.libbladeRF.bladerf_set_gain_mode|
% C++ Signature: int bladerf_set_gain_mode(bladerf * dev,bladerf_channel ch,bladerf_gain_mode mode)
bladerf_set_gain_modeDefinition = addFunction(libDef, ...
    "int bladerf_set_gain_mode(bladerf * dev,bladerf_channel ch,bladerf_gain_mode mode)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_gain_mode", ...
    "Description", "clib.libbladeRF.bladerf_set_gain_mode Representation of C++ function bladerf_set_gain_mode."); % Modify help description values as needed.
defineArgument(bladerf_set_gain_modeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_gain_modeDefinition, "ch", "int32");
defineArgument(bladerf_set_gain_modeDefinition, "mode", "clib.libbladeRF.bladerf_gain_mode");
defineOutput(bladerf_set_gain_modeDefinition, "RetVal", "int32");
validate(bladerf_set_gain_modeDefinition);

%% C++ function |bladerf_get_gain_mode| with MATLAB name |clib.libbladeRF.bladerf_get_gain_mode|
% C++ Signature: int bladerf_get_gain_mode(bladerf * dev,bladerf_channel ch,int * mode)
%bladerf_get_gain_modeDefinition = addFunction(libDef, ...
%    "int bladerf_get_gain_mode(bladerf * dev,bladerf_channel ch,int * mode)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_gain_mode", ...
%    "Description", "clib.libbladeRF.bladerf_get_gain_mode Representation of C++ function bladerf_get_gain_mode."); % Modify help description values as needed.
%defineArgument(bladerf_get_gain_modeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_gain_modeDefinition, "ch", "int32");
%defineArgument(bladerf_get_gain_modeDefinition, "mode", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_gain_modeDefinition, "RetVal", "int32");
%validate(bladerf_get_gain_modeDefinition);

%% C++ function |bladerf_get_gain_modes| with MATLAB name |clib.libbladeRF.bladerf_get_gain_modes|
% C++ Signature: int bladerf_get_gain_modes(bladerf * dev,bladerf_channel ch,bladerf_gain_modes const * * modes)
bladerf_get_gain_modesDefinition = addFunction(libDef, ...
    "int bladerf_get_gain_modes(bladerf * dev,bladerf_channel ch,bladerf_gain_modes const * * modes)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_gain_modes", ...
    "Description", "clib.libbladeRF.bladerf_get_gain_modes Representation of C++ function bladerf_get_gain_modes."); % Modify help description values as needed.
defineArgument(bladerf_get_gain_modesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_gain_modesDefinition, "ch", "int32");
defineArgument(bladerf_get_gain_modesDefinition, "modes", "clib.libbladeRF.bladerf_gain_modes", "output", 1);
defineOutput(bladerf_get_gain_modesDefinition, "RetVal", "int32");
validate(bladerf_get_gain_modesDefinition);

%% C++ function |bladerf_get_gain_range| with MATLAB name |clib.libbladeRF.bladerf_get_gain_range|
% C++ Signature: int bladerf_get_gain_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)
bladerf_get_gain_rangeDefinition = addFunction(libDef, ...
    "int bladerf_get_gain_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_gain_range", ...
    "Description", "clib.libbladeRF.bladerf_get_gain_range Representation of C++ function bladerf_get_gain_range."); % Modify help description values as needed.
defineArgument(bladerf_get_gain_rangeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_gain_rangeDefinition, "ch", "int32");
defineArgument(bladerf_get_gain_rangeDefinition, "range", "clib.libbladeRF.bladerf_range", "output", 1);
defineOutput(bladerf_get_gain_rangeDefinition, "RetVal", "int32");
validate(bladerf_get_gain_rangeDefinition);

%% C++ function |bladerf_set_gain_stage| with MATLAB name |clib.libbladeRF.bladerf_set_gain_stage|
% C++ Signature: int bladerf_set_gain_stage(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_gain gain)
bladerf_set_gain_stageDefinition = addFunction(libDef, ...
    "int bladerf_set_gain_stage(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_gain gain)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_gain_stage", ...
    "Description", "clib.libbladeRF.bladerf_set_gain_stage Representation of C++ function bladerf_set_gain_stage."); % Modify help description values as needed.
defineArgument(bladerf_set_gain_stageDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_gain_stageDefinition, "ch", "int32");
defineArgument(bladerf_set_gain_stageDefinition, "stage", "string", "input", "nullTerminated");
defineArgument(bladerf_set_gain_stageDefinition, "gain", "int32");
defineOutput(bladerf_set_gain_stageDefinition, "RetVal", "int32");
validate(bladerf_set_gain_stageDefinition);

%% C++ function |bladerf_get_gain_stage| with MATLAB name |clib.libbladeRF.bladerf_get_gain_stage|
% C++ Signature: int bladerf_get_gain_stage(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_gain * gain)
%bladerf_get_gain_stageDefinition = addFunction(libDef, ...
%    "int bladerf_get_gain_stage(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_gain * gain)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_gain_stage", ...
%    "Description", "clib.libbladeRF.bladerf_get_gain_stage Representation of C++ function bladerf_get_gain_stage."); % Modify help description values as needed.
%defineArgument(bladerf_get_gain_stageDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_gain_stageDefinition, "ch", "int32");
%defineArgument(bladerf_get_gain_stageDefinition, "stage", "string", "input", "nullTerminated");
%defineArgument(bladerf_get_gain_stageDefinition, "gain", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_gain_stageDefinition, "RetVal", "int32");
%validate(bladerf_get_gain_stageDefinition);

%% C++ function |bladerf_get_gain_stage_range| with MATLAB name |clib.libbladeRF.bladerf_get_gain_stage_range|
% C++ Signature: int bladerf_get_gain_stage_range(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_range const * * range)
bladerf_get_gain_stage_rangeDefinition = addFunction(libDef, ...
    "int bladerf_get_gain_stage_range(bladerf * dev,bladerf_channel ch,char const * stage,bladerf_range const * * range)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_gain_stage_range", ...
    "Description", "clib.libbladeRF.bladerf_get_gain_stage_range Representation of C++ function bladerf_get_gain_stage_range."); % Modify help description values as needed.
defineArgument(bladerf_get_gain_stage_rangeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_gain_stage_rangeDefinition, "ch", "int32");
defineArgument(bladerf_get_gain_stage_rangeDefinition, "stage", "string", "input", "nullTerminated");
defineArgument(bladerf_get_gain_stage_rangeDefinition, "range", "clib.libbladeRF.bladerf_range", "output", 1);
defineOutput(bladerf_get_gain_stage_rangeDefinition, "RetVal", "int32");
validate(bladerf_get_gain_stage_rangeDefinition);

%% C++ function |bladerf_get_gain_stages| with MATLAB name |clib.libbladeRF.bladerf_get_gain_stages|
% C++ Signature: int bladerf_get_gain_stages(bladerf * dev,bladerf_channel ch,char const * * stages,size_t count)
%bladerf_get_gain_stagesDefinition = addFunction(libDef, ...
%    "int bladerf_get_gain_stages(bladerf * dev,bladerf_channel ch,char const * * stages,size_t count)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_gain_stages", ...
%    "Description", "clib.libbladeRF.bladerf_get_gain_stages Representation of C++ function bladerf_get_gain_stages."); % Modify help description values as needed.
%defineArgument(bladerf_get_gain_stagesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_gain_stagesDefinition, "ch", "int32");
%defineArgument(bladerf_get_gain_stagesDefinition, "stages", "string", "input", {<SHAPE>, "nullTerminated"});
%defineArgument(bladerf_get_gain_stagesDefinition, "count", "uint64");
%defineOutput(bladerf_get_gain_stagesDefinition, "RetVal", "int32");
%validate(bladerf_get_gain_stagesDefinition);

%% C++ function |bladerf_set_sample_rate| with MATLAB name |clib.libbladeRF.bladerf_set_sample_rate|
% C++ Signature: int bladerf_set_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_sample_rate rate,bladerf_sample_rate * actual)
%bladerf_set_sample_rateDefinition = addFunction(libDef, ...
%    "int bladerf_set_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_sample_rate rate,bladerf_sample_rate * actual)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_set_sample_rate", ...
%    "Description", "clib.libbladeRF.bladerf_set_sample_rate Representation of C++ function bladerf_set_sample_rate."); % Modify help description values as needed.
%defineArgument(bladerf_set_sample_rateDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_set_sample_rateDefinition, "ch", "int32");
%defineArgument(bladerf_set_sample_rateDefinition, "rate", "uint32");
%defineArgument(bladerf_set_sample_rateDefinition, "actual", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_set_sample_rateDefinition, "RetVal", "int32");
%validate(bladerf_set_sample_rateDefinition);

%% C++ function |bladerf_set_rational_sample_rate| with MATLAB name |clib.libbladeRF.bladerf_set_rational_sample_rate|
% C++ Signature: int bladerf_set_rational_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_rational_rate * rate,bladerf_rational_rate * actual)
bladerf_set_rational_sample_rateDefinition = addFunction(libDef, ...
    "int bladerf_set_rational_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_rational_rate * rate,bladerf_rational_rate * actual)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_rational_sample_rate", ...
    "Description", "clib.libbladeRF.bladerf_set_rational_sample_rate Representation of C++ function bladerf_set_rational_sample_rate."); % Modify help description values as needed.
defineArgument(bladerf_set_rational_sample_rateDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_rational_sample_rateDefinition, "ch", "int32");
defineArgument(bladerf_set_rational_sample_rateDefinition, "rate", "clib.libbladeRF.bladerf_rational_rate", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_rational_rate", or "clib.array.libbladeRF.bladerf_rational_rate"
defineArgument(bladerf_set_rational_sample_rateDefinition, "actual", "clib.libbladeRF.bladerf_rational_rate", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_rational_rate", or "clib.array.libbladeRF.bladerf_rational_rate"
defineOutput(bladerf_set_rational_sample_rateDefinition, "RetVal", "int32");
validate(bladerf_set_rational_sample_rateDefinition);

%% C++ function |bladerf_get_sample_rate| with MATLAB name |clib.libbladeRF.bladerf_get_sample_rate|
% C++ Signature: int bladerf_get_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_sample_rate * rate)
%bladerf_get_sample_rateDefinition = addFunction(libDef, ...
%    "int bladerf_get_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_sample_rate * rate)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_sample_rate", ...
%    "Description", "clib.libbladeRF.bladerf_get_sample_rate Representation of C++ function bladerf_get_sample_rate."); % Modify help description values as needed.
%defineArgument(bladerf_get_sample_rateDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_sample_rateDefinition, "ch", "int32");
%defineArgument(bladerf_get_sample_rateDefinition, "rate", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_get_sample_rateDefinition, "RetVal", "int32");
%validate(bladerf_get_sample_rateDefinition);

%% C++ function |bladerf_get_sample_rate_range| with MATLAB name |clib.libbladeRF.bladerf_get_sample_rate_range|
% C++ Signature: int bladerf_get_sample_rate_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)
bladerf_get_sample_rate_rangeDefinition = addFunction(libDef, ...
    "int bladerf_get_sample_rate_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_sample_rate_range", ...
    "Description", "clib.libbladeRF.bladerf_get_sample_rate_range Representation of C++ function bladerf_get_sample_rate_range."); % Modify help description values as needed.
defineArgument(bladerf_get_sample_rate_rangeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_sample_rate_rangeDefinition, "ch", "int32");
defineArgument(bladerf_get_sample_rate_rangeDefinition, "range", "clib.libbladeRF.bladerf_range", "output", 1);
defineOutput(bladerf_get_sample_rate_rangeDefinition, "RetVal", "int32");
validate(bladerf_get_sample_rate_rangeDefinition);

%% C++ function |bladerf_get_rational_sample_rate| with MATLAB name |clib.libbladeRF.bladerf_get_rational_sample_rate|
% C++ Signature: int bladerf_get_rational_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_rational_rate * rate)
bladerf_get_rational_sample_rateDefinition = addFunction(libDef, ...
    "int bladerf_get_rational_sample_rate(bladerf * dev,bladerf_channel ch,bladerf_rational_rate * rate)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_rational_sample_rate", ...
    "Description", "clib.libbladeRF.bladerf_get_rational_sample_rate Representation of C++ function bladerf_get_rational_sample_rate."); % Modify help description values as needed.
defineArgument(bladerf_get_rational_sample_rateDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_rational_sample_rateDefinition, "ch", "int32");
defineArgument(bladerf_get_rational_sample_rateDefinition, "rate", "clib.libbladeRF.bladerf_rational_rate", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_rational_rate", or "clib.array.libbladeRF.bladerf_rational_rate"
defineOutput(bladerf_get_rational_sample_rateDefinition, "RetVal", "int32");
validate(bladerf_get_rational_sample_rateDefinition);

%% C++ function |bladerf_set_bandwidth| with MATLAB name |clib.libbladeRF.bladerf_set_bandwidth|
% C++ Signature: int bladerf_set_bandwidth(bladerf * dev,bladerf_channel ch,bladerf_bandwidth bandwidth,bladerf_bandwidth * actual)
%bladerf_set_bandwidthDefinition = addFunction(libDef, ...
%    "int bladerf_set_bandwidth(bladerf * dev,bladerf_channel ch,bladerf_bandwidth bandwidth,bladerf_bandwidth * actual)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_set_bandwidth", ...
%    "Description", "clib.libbladeRF.bladerf_set_bandwidth Representation of C++ function bladerf_set_bandwidth."); % Modify help description values as needed.
%defineArgument(bladerf_set_bandwidthDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_set_bandwidthDefinition, "ch", "int32");
%defineArgument(bladerf_set_bandwidthDefinition, "bandwidth", "uint32");
%defineArgument(bladerf_set_bandwidthDefinition, "actual", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_set_bandwidthDefinition, "RetVal", "int32");
%validate(bladerf_set_bandwidthDefinition);

%% C++ function |bladerf_get_bandwidth| with MATLAB name |clib.libbladeRF.bladerf_get_bandwidth|
% C++ Signature: int bladerf_get_bandwidth(bladerf * dev,bladerf_channel ch,bladerf_bandwidth * bandwidth)
%bladerf_get_bandwidthDefinition = addFunction(libDef, ...
%    "int bladerf_get_bandwidth(bladerf * dev,bladerf_channel ch,bladerf_bandwidth * bandwidth)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_bandwidth", ...
%    "Description", "clib.libbladeRF.bladerf_get_bandwidth Representation of C++ function bladerf_get_bandwidth."); % Modify help description values as needed.
%defineArgument(bladerf_get_bandwidthDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_bandwidthDefinition, "ch", "int32");
%defineArgument(bladerf_get_bandwidthDefinition, "bandwidth", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_get_bandwidthDefinition, "RetVal", "int32");
%validate(bladerf_get_bandwidthDefinition);

%% C++ function |bladerf_get_bandwidth_range| with MATLAB name |clib.libbladeRF.bladerf_get_bandwidth_range|
% C++ Signature: int bladerf_get_bandwidth_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)
bladerf_get_bandwidth_rangeDefinition = addFunction(libDef, ...
    "int bladerf_get_bandwidth_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_bandwidth_range", ...
    "Description", "clib.libbladeRF.bladerf_get_bandwidth_range Representation of C++ function bladerf_get_bandwidth_range."); % Modify help description values as needed.
defineArgument(bladerf_get_bandwidth_rangeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_bandwidth_rangeDefinition, "ch", "int32");
defineArgument(bladerf_get_bandwidth_rangeDefinition, "range", "clib.libbladeRF.bladerf_range", "output", 1);
defineOutput(bladerf_get_bandwidth_rangeDefinition, "RetVal", "int32");
validate(bladerf_get_bandwidth_rangeDefinition);

%% C++ function |bladerf_select_band| with MATLAB name |clib.libbladeRF.bladerf_select_band|
% C++ Signature: int bladerf_select_band(bladerf * dev,bladerf_channel ch,bladerf_frequency frequency)
bladerf_select_bandDefinition = addFunction(libDef, ...
    "int bladerf_select_band(bladerf * dev,bladerf_channel ch,bladerf_frequency frequency)", ...
    "MATLABName", "clib.libbladeRF.bladerf_select_band", ...
    "Description", "clib.libbladeRF.bladerf_select_band Representation of C++ function bladerf_select_band."); % Modify help description values as needed.
defineArgument(bladerf_select_bandDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_select_bandDefinition, "ch", "int32");
defineArgument(bladerf_select_bandDefinition, "frequency", "uint64");
defineOutput(bladerf_select_bandDefinition, "RetVal", "int32");
validate(bladerf_select_bandDefinition);

%% C++ function |bladerf_set_frequency| with MATLAB name |clib.libbladeRF.bladerf_set_frequency|
% C++ Signature: int bladerf_set_frequency(bladerf * dev,bladerf_channel ch,bladerf_frequency frequency)
bladerf_set_frequencyDefinition = addFunction(libDef, ...
    "int bladerf_set_frequency(bladerf * dev,bladerf_channel ch,bladerf_frequency frequency)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_frequency", ...
    "Description", "clib.libbladeRF.bladerf_set_frequency Representation of C++ function bladerf_set_frequency."); % Modify help description values as needed.
defineArgument(bladerf_set_frequencyDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_frequencyDefinition, "ch", "int32");
defineArgument(bladerf_set_frequencyDefinition, "frequency", "uint64");
defineOutput(bladerf_set_frequencyDefinition, "RetVal", "int32");
validate(bladerf_set_frequencyDefinition);

%% C++ function |bladerf_get_frequency| with MATLAB name |clib.libbladeRF.bladerf_get_frequency|
% C++ Signature: int bladerf_get_frequency(bladerf * dev,bladerf_channel ch,bladerf_frequency * frequency)
%bladerf_get_frequencyDefinition = addFunction(libDef, ...
%    "int bladerf_get_frequency(bladerf * dev,bladerf_channel ch,bladerf_frequency * frequency)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_frequency", ...
%    "Description", "clib.libbladeRF.bladerf_get_frequency Representation of C++ function bladerf_get_frequency."); % Modify help description values as needed.
%defineArgument(bladerf_get_frequencyDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_frequencyDefinition, "ch", "int32");
%defineArgument(bladerf_get_frequencyDefinition, "frequency", "clib.array.libbladeRF.UnsignedLong", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedLong", or "uint64"
%defineOutput(bladerf_get_frequencyDefinition, "RetVal", "int32");
%validate(bladerf_get_frequencyDefinition);

%% C++ function |bladerf_get_frequency_range| with MATLAB name |clib.libbladeRF.bladerf_get_frequency_range|
% C++ Signature: int bladerf_get_frequency_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)
bladerf_get_frequency_rangeDefinition = addFunction(libDef, ...
    "int bladerf_get_frequency_range(bladerf * dev,bladerf_channel ch,bladerf_range const * * range)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_frequency_range", ...
    "Description", "clib.libbladeRF.bladerf_get_frequency_range Representation of C++ function bladerf_get_frequency_range."); % Modify help description values as needed.
defineArgument(bladerf_get_frequency_rangeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_frequency_rangeDefinition, "ch", "int32");
defineArgument(bladerf_get_frequency_rangeDefinition, "range", "clib.libbladeRF.bladerf_range", "output", 1);
defineOutput(bladerf_get_frequency_rangeDefinition, "RetVal", "int32");
validate(bladerf_get_frequency_rangeDefinition);

%% C++ function |bladerf_get_loopback_modes| with MATLAB name |clib.libbladeRF.bladerf_get_loopback_modes|
% C++ Signature: int bladerf_get_loopback_modes(bladerf * dev,bladerf_loopback_modes const * * modes)
bladerf_get_loopback_modesDefinition = addFunction(libDef, ...
    "int bladerf_get_loopback_modes(bladerf * dev,bladerf_loopback_modes const * * modes)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_loopback_modes", ...
    "Description", "clib.libbladeRF.bladerf_get_loopback_modes Representation of C++ function bladerf_get_loopback_modes."); % Modify help description values as needed.
defineArgument(bladerf_get_loopback_modesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_loopback_modesDefinition, "modes", "clib.libbladeRF.bladerf_loopback_modes", "output", 1);
defineOutput(bladerf_get_loopback_modesDefinition, "RetVal", "int32");
validate(bladerf_get_loopback_modesDefinition);

%% C++ function |bladerf_is_loopback_mode_supported| with MATLAB name |clib.libbladeRF.bladerf_is_loopback_mode_supported|
% C++ Signature: bool bladerf_is_loopback_mode_supported(bladerf * dev,bladerf_loopback mode)
bladerf_is_loopback_mode_supportedDefinition = addFunction(libDef, ...
    "bool bladerf_is_loopback_mode_supported(bladerf * dev,bladerf_loopback mode)", ...
    "MATLABName", "clib.libbladeRF.bladerf_is_loopback_mode_supported", ...
    "Description", "clib.libbladeRF.bladerf_is_loopback_mode_supported Representation of C++ function bladerf_is_loopback_mode_supported."); % Modify help description values as needed.
defineArgument(bladerf_is_loopback_mode_supportedDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_is_loopback_mode_supportedDefinition, "mode", "clib.libbladeRF.bladerf_loopback");
defineOutput(bladerf_is_loopback_mode_supportedDefinition, "RetVal", "logical");
validate(bladerf_is_loopback_mode_supportedDefinition);

%% C++ function |bladerf_set_loopback| with MATLAB name |clib.libbladeRF.bladerf_set_loopback|
% C++ Signature: int bladerf_set_loopback(bladerf * dev,bladerf_loopback lb)
bladerf_set_loopbackDefinition = addFunction(libDef, ...
    "int bladerf_set_loopback(bladerf * dev,bladerf_loopback lb)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_loopback", ...
    "Description", "clib.libbladeRF.bladerf_set_loopback Representation of C++ function bladerf_set_loopback."); % Modify help description values as needed.
defineArgument(bladerf_set_loopbackDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_loopbackDefinition, "lb", "clib.libbladeRF.bladerf_loopback");
defineOutput(bladerf_set_loopbackDefinition, "RetVal", "int32");
validate(bladerf_set_loopbackDefinition);

%% C++ function |bladerf_get_loopback| with MATLAB name |clib.libbladeRF.bladerf_get_loopback|
% C++ Signature: int bladerf_get_loopback(bladerf * dev,int * lb)
%bladerf_get_loopbackDefinition = addFunction(libDef, ...
%    "int bladerf_get_loopback(bladerf * dev,int * lb)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_loopback", ...
%    "Description", "clib.libbladeRF.bladerf_get_loopback Representation of C++ function bladerf_get_loopback."); % Modify help description values as needed.
%defineArgument(bladerf_get_loopbackDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_loopbackDefinition, "lb", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_loopbackDefinition, "RetVal", "int32");
%validate(bladerf_get_loopbackDefinition);

%% C++ function |bladerf_trigger_init| with MATLAB name |clib.libbladeRF.bladerf_trigger_init|
% C++ Signature: int bladerf_trigger_init(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,bladerf_trigger * trigger)
bladerf_trigger_initDefinition = addFunction(libDef, ...
    "int bladerf_trigger_init(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,bladerf_trigger * trigger)", ...
    "MATLABName", "clib.libbladeRF.bladerf_trigger_init", ...
    "Description", "clib.libbladeRF.bladerf_trigger_init Representation of C++ function bladerf_trigger_init."); % Modify help description values as needed.
defineArgument(bladerf_trigger_initDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_trigger_initDefinition, "ch", "int32");
defineArgument(bladerf_trigger_initDefinition, "signal", "clib.libbladeRF.bladerf_trigger_signal");
defineArgument(bladerf_trigger_initDefinition, "trigger", "clib.libbladeRF.bladerf_trigger", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_trigger", or "clib.array.libbladeRF.bladerf_trigger"
defineOutput(bladerf_trigger_initDefinition, "RetVal", "int32");
validate(bladerf_trigger_initDefinition);

%% C++ function |bladerf_trigger_arm| with MATLAB name |clib.libbladeRF.bladerf_trigger_arm|
% C++ Signature: int bladerf_trigger_arm(bladerf * dev,bladerf_trigger const * trigger,bool arm,uint64_t resv1,uint64_t resv2)
bladerf_trigger_armDefinition = addFunction(libDef, ...
    "int bladerf_trigger_arm(bladerf * dev,bladerf_trigger const * trigger,bool arm,uint64_t resv1,uint64_t resv2)", ...
    "MATLABName", "clib.libbladeRF.bladerf_trigger_arm", ...
    "Description", "clib.libbladeRF.bladerf_trigger_arm Representation of C++ function bladerf_trigger_arm."); % Modify help description values as needed.
defineArgument(bladerf_trigger_armDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_trigger_armDefinition, "trigger", "clib.libbladeRF.bladerf_trigger", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_trigger", or "clib.array.libbladeRF.bladerf_trigger"
defineArgument(bladerf_trigger_armDefinition, "arm", "logical");
defineArgument(bladerf_trigger_armDefinition, "resv1", "uint64");
defineArgument(bladerf_trigger_armDefinition, "resv2", "uint64");
defineOutput(bladerf_trigger_armDefinition, "RetVal", "int32");
validate(bladerf_trigger_armDefinition);

%% C++ function |bladerf_trigger_fire| with MATLAB name |clib.libbladeRF.bladerf_trigger_fire|
% C++ Signature: int bladerf_trigger_fire(bladerf * dev,bladerf_trigger const * trigger)
bladerf_trigger_fireDefinition = addFunction(libDef, ...
    "int bladerf_trigger_fire(bladerf * dev,bladerf_trigger const * trigger)", ...
    "MATLABName", "clib.libbladeRF.bladerf_trigger_fire", ...
    "Description", "clib.libbladeRF.bladerf_trigger_fire Representation of C++ function bladerf_trigger_fire."); % Modify help description values as needed.
defineArgument(bladerf_trigger_fireDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_trigger_fireDefinition, "trigger", "clib.libbladeRF.bladerf_trigger", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_trigger", or "clib.array.libbladeRF.bladerf_trigger"
defineOutput(bladerf_trigger_fireDefinition, "RetVal", "int32");
validate(bladerf_trigger_fireDefinition);

%% C++ function |bladerf_trigger_state| with MATLAB name |clib.libbladeRF.bladerf_trigger_state|
% C++ Signature: int bladerf_trigger_state(bladerf * dev,bladerf_trigger const * trigger,bool * is_armed,bool * has_fired,bool * fire_requested,uint64_t * resv1,uint64_t * resv2)
%bladerf_trigger_stateDefinition = addFunction(libDef, ...
%    "int bladerf_trigger_state(bladerf * dev,bladerf_trigger const * trigger,bool * is_armed,bool * has_fired,bool * fire_requested,uint64_t * resv1,uint64_t * resv2)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_trigger_state", ...
%    "Description", "clib.libbladeRF.bladerf_trigger_state Representation of C++ function bladerf_trigger_state."); % Modify help description values as needed.
%defineArgument(bladerf_trigger_stateDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_trigger_stateDefinition, "trigger", "clib.libbladeRF.bladerf_trigger", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_trigger", or "clib.array.libbladeRF.bladerf_trigger"
%defineArgument(bladerf_trigger_stateDefinition, "is_armed", "clib.array.libbladeRF.Bool", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Bool", or "logical"
%defineArgument(bladerf_trigger_stateDefinition, "has_fired", "clib.array.libbladeRF.Bool", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Bool", or "logical"
%defineArgument(bladerf_trigger_stateDefinition, "fire_requested", "clib.array.libbladeRF.Bool", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Bool", or "logical"
%defineArgument(bladerf_trigger_stateDefinition, "resv1", "clib.array.libbladeRF.UnsignedLong", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedLong", or "uint64"
%defineArgument(bladerf_trigger_stateDefinition, "resv2", "clib.array.libbladeRF.UnsignedLong", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedLong", or "uint64"
%defineOutput(bladerf_trigger_stateDefinition, "RetVal", "int32");
%validate(bladerf_trigger_stateDefinition);

%% C++ function |bladerf_set_rx_mux| with MATLAB name |clib.libbladeRF.bladerf_set_rx_mux|
% C++ Signature: int bladerf_set_rx_mux(bladerf * dev,bladerf_rx_mux mux)
bladerf_set_rx_muxDefinition = addFunction(libDef, ...
    "int bladerf_set_rx_mux(bladerf * dev,bladerf_rx_mux mux)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_rx_mux", ...
    "Description", "clib.libbladeRF.bladerf_set_rx_mux Representation of C++ function bladerf_set_rx_mux."); % Modify help description values as needed.
defineArgument(bladerf_set_rx_muxDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_rx_muxDefinition, "mux", "clib.libbladeRF.bladerf_rx_mux");
defineOutput(bladerf_set_rx_muxDefinition, "RetVal", "int32");
validate(bladerf_set_rx_muxDefinition);

%% C++ function |bladerf_get_rx_mux| with MATLAB name |clib.libbladeRF.bladerf_get_rx_mux|
% C++ Signature: int bladerf_get_rx_mux(bladerf * dev,int * mode)
%bladerf_get_rx_muxDefinition = addFunction(libDef, ...
%    "int bladerf_get_rx_mux(bladerf * dev,int * mode)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_rx_mux", ...
%    "Description", "clib.libbladeRF.bladerf_get_rx_mux Representation of C++ function bladerf_get_rx_mux."); % Modify help description values as needed.
%defineArgument(bladerf_get_rx_muxDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_rx_muxDefinition, "mode", "clib.array.libbladeRF.Int", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Int", or "int32"
%defineOutput(bladerf_get_rx_muxDefinition, "RetVal", "int32");
%validate(bladerf_get_rx_muxDefinition);

%% C++ function |bladerf_cancel_scheduled_retunes| with MATLAB name |clib.libbladeRF.bladerf_cancel_scheduled_retunes|
% C++ Signature: int bladerf_cancel_scheduled_retunes(bladerf * dev,bladerf_channel ch)
bladerf_cancel_scheduled_retunesDefinition = addFunction(libDef, ...
    "int bladerf_cancel_scheduled_retunes(bladerf * dev,bladerf_channel ch)", ...
    "MATLABName", "clib.libbladeRF.bladerf_cancel_scheduled_retunes", ...
    "Description", "clib.libbladeRF.bladerf_cancel_scheduled_retunes Representation of C++ function bladerf_cancel_scheduled_retunes."); % Modify help description values as needed.
defineArgument(bladerf_cancel_scheduled_retunesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_cancel_scheduled_retunesDefinition, "ch", "int32");
defineOutput(bladerf_cancel_scheduled_retunesDefinition, "RetVal", "int32");
validate(bladerf_cancel_scheduled_retunesDefinition);

%% C++ function |bladerf_set_correction| with MATLAB name |clib.libbladeRF.bladerf_set_correction|
% C++ Signature: int bladerf_set_correction(bladerf * dev,bladerf_channel ch,bladerf_correction corr,bladerf_correction_value value)
bladerf_set_correctionDefinition = addFunction(libDef, ...
    "int bladerf_set_correction(bladerf * dev,bladerf_channel ch,bladerf_correction corr,bladerf_correction_value value)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_correction", ...
    "Description", "clib.libbladeRF.bladerf_set_correction Representation of C++ function bladerf_set_correction."); % Modify help description values as needed.
defineArgument(bladerf_set_correctionDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_correctionDefinition, "ch", "int32");
defineArgument(bladerf_set_correctionDefinition, "corr", "clib.libbladeRF.bladerf_correction");
defineArgument(bladerf_set_correctionDefinition, "value", "int16");
defineOutput(bladerf_set_correctionDefinition, "RetVal", "int32");
validate(bladerf_set_correctionDefinition);

%% C++ function |bladerf_get_correction| with MATLAB name |clib.libbladeRF.bladerf_get_correction|
% C++ Signature: int bladerf_get_correction(bladerf * dev,bladerf_channel ch,bladerf_correction corr,bladerf_correction_value * value)
%bladerf_get_correctionDefinition = addFunction(libDef, ...
%    "int bladerf_get_correction(bladerf * dev,bladerf_channel ch,bladerf_correction corr,bladerf_correction_value * value)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_correction", ...
%    "Description", "clib.libbladeRF.bladerf_get_correction Representation of C++ function bladerf_get_correction."); % Modify help description values as needed.
%defineArgument(bladerf_get_correctionDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_correctionDefinition, "ch", "int32");
%defineArgument(bladerf_get_correctionDefinition, "corr", "clib.libbladeRF.bladerf_correction");
%defineArgument(bladerf_get_correctionDefinition, "value", "clib.array.libbladeRF.Short", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.Short", or "int16"
%defineOutput(bladerf_get_correctionDefinition, "RetVal", "int32");
%validate(bladerf_get_correctionDefinition);

%% C++ function |bladerf_interleave_stream_buffer| with MATLAB name |clib.libbladeRF.bladerf_interleave_stream_buffer|
% C++ Signature: int bladerf_interleave_stream_buffer(bladerf_channel_layout layout,bladerf_format format,unsigned int buffer_size,void * samples)
%bladerf_interleave_stream_bufferDefinition = addFunction(libDef, ...
%    "int bladerf_interleave_stream_buffer(bladerf_channel_layout layout,bladerf_format format,unsigned int buffer_size,void * samples)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_interleave_stream_buffer", ...
%    "Description", "clib.libbladeRF.bladerf_interleave_stream_buffer Representation of C++ function bladerf_interleave_stream_buffer."); % Modify help description values as needed.
%defineArgument(bladerf_interleave_stream_bufferDefinition, "layout", "clib.libbladeRF.bladerf_channel_layout");
%defineArgument(bladerf_interleave_stream_bufferDefinition, "format", "clib.libbladeRF.bladerf_format");
%defineArgument(bladerf_interleave_stream_bufferDefinition, "buffer_size", "uint32");
%defineArgument(bladerf_interleave_stream_bufferDefinition, "samples", <MLTYPE>, <DIRECTION>, 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineOutput(bladerf_interleave_stream_bufferDefinition, "RetVal", "int32");
%validate(bladerf_interleave_stream_bufferDefinition);

%% C++ function |bladerf_deinterleave_stream_buffer| with MATLAB name |clib.libbladeRF.bladerf_deinterleave_stream_buffer|
% C++ Signature: int bladerf_deinterleave_stream_buffer(bladerf_channel_layout layout,bladerf_format format,unsigned int buffer_size,void * samples)
%bladerf_deinterleave_stream_bufferDefinition = addFunction(libDef, ...
%    "int bladerf_deinterleave_stream_buffer(bladerf_channel_layout layout,bladerf_format format,unsigned int buffer_size,void * samples)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_deinterleave_stream_buffer", ...
%    "Description", "clib.libbladeRF.bladerf_deinterleave_stream_buffer Representation of C++ function bladerf_deinterleave_stream_buffer."); % Modify help description values as needed.
%defineArgument(bladerf_deinterleave_stream_bufferDefinition, "layout", "clib.libbladeRF.bladerf_channel_layout");
%defineArgument(bladerf_deinterleave_stream_bufferDefinition, "format", "clib.libbladeRF.bladerf_format");
%defineArgument(bladerf_deinterleave_stream_bufferDefinition, "buffer_size", "uint32");
%defineArgument(bladerf_deinterleave_stream_bufferDefinition, "samples", <MLTYPE>, <DIRECTION>, 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineOutput(bladerf_deinterleave_stream_bufferDefinition, "RetVal", "int32");
%validate(bladerf_deinterleave_stream_bufferDefinition);

%% C++ function |bladerf_enable_module| with MATLAB name |clib.libbladeRF.bladerf_enable_module|
% C++ Signature: int bladerf_enable_module(bladerf * dev,bladerf_channel ch,bool enable)
bladerf_enable_moduleDefinition = addFunction(libDef, ...
    "int bladerf_enable_module(bladerf * dev,bladerf_channel ch,bool enable)", ...
    "MATLABName", "clib.libbladeRF.bladerf_enable_module", ...
    "Description", "clib.libbladeRF.bladerf_enable_module Representation of C++ function bladerf_enable_module."); % Modify help description values as needed.
defineArgument(bladerf_enable_moduleDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_enable_moduleDefinition, "ch", "int32");
defineArgument(bladerf_enable_moduleDefinition, "enable", "logical");
defineOutput(bladerf_enable_moduleDefinition, "RetVal", "int32");
validate(bladerf_enable_moduleDefinition);

%% C++ function |bladerf_get_timestamp| with MATLAB name |clib.libbladeRF.bladerf_get_timestamp|
% C++ Signature: int bladerf_get_timestamp(bladerf * dev,bladerf_direction dir,bladerf_timestamp * timestamp)
%bladerf_get_timestampDefinition = addFunction(libDef, ...
%    "int bladerf_get_timestamp(bladerf * dev,bladerf_direction dir,bladerf_timestamp * timestamp)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_timestamp", ...
%    "Description", "clib.libbladeRF.bladerf_get_timestamp Representation of C++ function bladerf_get_timestamp."); % Modify help description values as needed.
%defineArgument(bladerf_get_timestampDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_timestampDefinition, "dir", "clib.libbladeRF.bladerf_direction");
%defineArgument(bladerf_get_timestampDefinition, "timestamp", "clib.array.libbladeRF.UnsignedLong", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedLong", or "uint64"
%defineOutput(bladerf_get_timestampDefinition, "RetVal", "int32");
%validate(bladerf_get_timestampDefinition);

%% C++ function |bladerf_sync_config| with MATLAB name |clib.libbladeRF.bladerf_sync_config|
% C++ Signature: int bladerf_sync_config(bladerf * dev,bladerf_channel_layout layout,bladerf_format format,unsigned int num_buffers,unsigned int buffer_size,unsigned int num_transfers,unsigned int stream_timeout)
bladerf_sync_configDefinition = addFunction(libDef, ...
    "int bladerf_sync_config(bladerf * dev,bladerf_channel_layout layout,bladerf_format format,unsigned int num_buffers,unsigned int buffer_size,unsigned int num_transfers,unsigned int stream_timeout)", ...
    "MATLABName", "clib.libbladeRF.bladerf_sync_config", ...
    "Description", "clib.libbladeRF.bladerf_sync_config Representation of C++ function bladerf_sync_config."); % Modify help description values as needed.
defineArgument(bladerf_sync_configDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_sync_configDefinition, "layout", "clib.libbladeRF.bladerf_channel_layout");
defineArgument(bladerf_sync_configDefinition, "format", "clib.libbladeRF.bladerf_format");
defineArgument(bladerf_sync_configDefinition, "num_buffers", "uint32");
defineArgument(bladerf_sync_configDefinition, "buffer_size", "uint32");
defineArgument(bladerf_sync_configDefinition, "num_transfers", "uint32");
defineArgument(bladerf_sync_configDefinition, "stream_timeout", "uint32");
defineOutput(bladerf_sync_configDefinition, "RetVal", "int32");
validate(bladerf_sync_configDefinition);

%% C++ function |bladerf_sync_tx| with MATLAB name |clib.libbladeRF.bladerf_sync_tx|
% C++ Signature: int bladerf_sync_tx(bladerf * dev,void const * samples,unsigned int num_samples,bladerf_metadata * metadata,unsigned int timeout_ms)
%bladerf_sync_txDefinition = addFunction(libDef, ...
%    "int bladerf_sync_tx(bladerf * dev,void const * samples,unsigned int num_samples,bladerf_metadata * metadata,unsigned int timeout_ms)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_sync_tx", ...
%    "Description", "clib.libbladeRF.bladerf_sync_tx Representation of C++ function bladerf_sync_tx."); % Modify help description values as needed.
%defineArgument(bladerf_sync_txDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_sync_txDefinition, "samples", <MLTYPE>, "input", 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineArgument(bladerf_sync_txDefinition, "num_samples", "uint32");
%defineArgument(bladerf_sync_txDefinition, "metadata", "clib.libbladeRF.bladerf_metadata", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_metadata", or "clib.array.libbladeRF.bladerf_metadata"
%defineArgument(bladerf_sync_txDefinition, "timeout_ms", "uint32");
%defineOutput(bladerf_sync_txDefinition, "RetVal", "int32");
%validate(bladerf_sync_txDefinition);

%% C++ function |bladerf_sync_rx| with MATLAB name |clib.libbladeRF.bladerf_sync_rx|
% C++ Signature: int bladerf_sync_rx(bladerf * dev,void * samples,unsigned int num_samples,bladerf_metadata * metadata,unsigned int timeout_ms)
%bladerf_sync_rxDefinition = addFunction(libDef, ...
%    "int bladerf_sync_rx(bladerf * dev,void * samples,unsigned int num_samples,bladerf_metadata * metadata,unsigned int timeout_ms)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_sync_rx", ...
%    "Description", "clib.libbladeRF.bladerf_sync_rx Representation of C++ function bladerf_sync_rx."); % Modify help description values as needed.
%defineArgument(bladerf_sync_rxDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_sync_rxDefinition, "samples", <MLTYPE>, <DIRECTION>, 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineArgument(bladerf_sync_rxDefinition, "num_samples", "uint32");
%defineArgument(bladerf_sync_rxDefinition, "metadata", "clib.libbladeRF.bladerf_metadata", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_metadata", or "clib.array.libbladeRF.bladerf_metadata"
%defineArgument(bladerf_sync_rxDefinition, "timeout_ms", "uint32");
%defineOutput(bladerf_sync_rxDefinition, "RetVal", "int32");
%validate(bladerf_sync_rxDefinition);

%% C++ function |bladerf_stream| with MATLAB name |clib.libbladeRF.bladerf_stream|
% C++ Signature: int bladerf_stream(bladerf_stream * stream,bladerf_channel_layout layout)
bladerf_streamDefinition = addFunction(libDef, ...
    "int bladerf_stream(bladerf_stream * stream,bladerf_channel_layout layout)", ...
    "MATLABName", "clib.libbladeRF.bladerf_stream", ...
    "Description", "clib.libbladeRF.bladerf_stream Representation of C++ function bladerf_stream."); % Modify help description values as needed.
defineArgument(bladerf_streamDefinition, "stream", "clib.libbladeRF.bladerf_stream", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_stream", or "clib.array.libbladeRF.bladerf_stream"
defineArgument(bladerf_streamDefinition, "layout", "clib.libbladeRF.bladerf_channel_layout");
defineOutput(bladerf_streamDefinition, "RetVal", "int32");
validate(bladerf_streamDefinition);

%% C++ function |bladerf_submit_stream_buffer| with MATLAB name |clib.libbladeRF.bladerf_submit_stream_buffer|
% C++ Signature: int bladerf_submit_stream_buffer(bladerf_stream * stream,void * buffer,unsigned int timeout_ms)
%bladerf_submit_stream_bufferDefinition = addFunction(libDef, ...
%    "int bladerf_submit_stream_buffer(bladerf_stream * stream,void * buffer,unsigned int timeout_ms)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_submit_stream_buffer", ...
%    "Description", "clib.libbladeRF.bladerf_submit_stream_buffer Representation of C++ function bladerf_submit_stream_buffer."); % Modify help description values as needed.
%defineArgument(bladerf_submit_stream_bufferDefinition, "stream", "clib.libbladeRF.bladerf_stream", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_stream", or "clib.array.libbladeRF.bladerf_stream"
%defineArgument(bladerf_submit_stream_bufferDefinition, "buffer", <MLTYPE>, <DIRECTION>, 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineArgument(bladerf_submit_stream_bufferDefinition, "timeout_ms", "uint32");
%defineOutput(bladerf_submit_stream_bufferDefinition, "RetVal", "int32");
%validate(bladerf_submit_stream_bufferDefinition);

%% C++ function |bladerf_submit_stream_buffer_nb| with MATLAB name |clib.libbladeRF.bladerf_submit_stream_buffer_nb|
% C++ Signature: int bladerf_submit_stream_buffer_nb(bladerf_stream * stream,void * buffer)
%bladerf_submit_stream_buffer_nbDefinition = addFunction(libDef, ...
%    "int bladerf_submit_stream_buffer_nb(bladerf_stream * stream,void * buffer)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_submit_stream_buffer_nb", ...
%    "Description", "clib.libbladeRF.bladerf_submit_stream_buffer_nb Representation of C++ function bladerf_submit_stream_buffer_nb."); % Modify help description values as needed.
%defineArgument(bladerf_submit_stream_buffer_nbDefinition, "stream", "clib.libbladeRF.bladerf_stream", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_stream", or "clib.array.libbladeRF.bladerf_stream"
%defineArgument(bladerf_submit_stream_buffer_nbDefinition, "buffer", <MLTYPE>, <DIRECTION>, 1); % <MLTYPE> can be primitive type, user-defined type, clib.array type, or a list of existing typedef names for void*.
%defineOutput(bladerf_submit_stream_buffer_nbDefinition, "RetVal", "int32");
%validate(bladerf_submit_stream_buffer_nbDefinition);

%% C++ function |bladerf_deinit_stream| with MATLAB name |clib.libbladeRF.bladerf_deinit_stream|
% C++ Signature: void bladerf_deinit_stream(bladerf_stream * stream)
bladerf_deinit_streamDefinition = addFunction(libDef, ...
    "void bladerf_deinit_stream(bladerf_stream * stream)", ...
    "MATLABName", "clib.libbladeRF.bladerf_deinit_stream", ...
    "Description", "clib.libbladeRF.bladerf_deinit_stream Representation of C++ function bladerf_deinit_stream."); % Modify help description values as needed.
defineArgument(bladerf_deinit_streamDefinition, "stream", "clib.libbladeRF.bladerf_stream", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_stream", or "clib.array.libbladeRF.bladerf_stream"
validate(bladerf_deinit_streamDefinition);

%% C++ function |bladerf_set_stream_timeout| with MATLAB name |clib.libbladeRF.bladerf_set_stream_timeout|
% C++ Signature: int bladerf_set_stream_timeout(bladerf * dev,bladerf_direction dir,unsigned int timeout)
bladerf_set_stream_timeoutDefinition = addFunction(libDef, ...
    "int bladerf_set_stream_timeout(bladerf * dev,bladerf_direction dir,unsigned int timeout)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_stream_timeout", ...
    "Description", "clib.libbladeRF.bladerf_set_stream_timeout Representation of C++ function bladerf_set_stream_timeout."); % Modify help description values as needed.
defineArgument(bladerf_set_stream_timeoutDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_stream_timeoutDefinition, "dir", "clib.libbladeRF.bladerf_direction");
defineArgument(bladerf_set_stream_timeoutDefinition, "timeout", "uint32");
defineOutput(bladerf_set_stream_timeoutDefinition, "RetVal", "int32");
validate(bladerf_set_stream_timeoutDefinition);

%% C++ function |bladerf_get_stream_timeout| with MATLAB name |clib.libbladeRF.bladerf_get_stream_timeout|
% C++ Signature: int bladerf_get_stream_timeout(bladerf * dev,bladerf_direction dir,unsigned int * timeout)
%bladerf_get_stream_timeoutDefinition = addFunction(libDef, ...
%    "int bladerf_get_stream_timeout(bladerf * dev,bladerf_direction dir,unsigned int * timeout)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_stream_timeout", ...
%    "Description", "clib.libbladeRF.bladerf_get_stream_timeout Representation of C++ function bladerf_get_stream_timeout."); % Modify help description values as needed.
%defineArgument(bladerf_get_stream_timeoutDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_stream_timeoutDefinition, "dir", "clib.libbladeRF.bladerf_direction");
%defineArgument(bladerf_get_stream_timeoutDefinition, "timeout", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_get_stream_timeoutDefinition, "RetVal", "int32");
%validate(bladerf_get_stream_timeoutDefinition);

%% C++ function |bladerf_flash_firmware| with MATLAB name |clib.libbladeRF.bladerf_flash_firmware|
% C++ Signature: int bladerf_flash_firmware(bladerf * dev,char const * firmware)
bladerf_flash_firmwareDefinition = addFunction(libDef, ...
    "int bladerf_flash_firmware(bladerf * dev,char const * firmware)", ...
    "MATLABName", "clib.libbladeRF.bladerf_flash_firmware", ...
    "Description", "clib.libbladeRF.bladerf_flash_firmware Representation of C++ function bladerf_flash_firmware."); % Modify help description values as needed.
defineArgument(bladerf_flash_firmwareDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_flash_firmwareDefinition, "firmware", "string", "input", "nullTerminated");
defineOutput(bladerf_flash_firmwareDefinition, "RetVal", "int32");
validate(bladerf_flash_firmwareDefinition);

%% C++ function |bladerf_load_fpga| with MATLAB name |clib.libbladeRF.bladerf_load_fpga|
% C++ Signature: int bladerf_load_fpga(bladerf * dev,char const * fpga)
bladerf_load_fpgaDefinition = addFunction(libDef, ...
    "int bladerf_load_fpga(bladerf * dev,char const * fpga)", ...
    "MATLABName", "clib.libbladeRF.bladerf_load_fpga", ...
    "Description", "clib.libbladeRF.bladerf_load_fpga Representation of C++ function bladerf_load_fpga."); % Modify help description values as needed.
defineArgument(bladerf_load_fpgaDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_load_fpgaDefinition, "fpga", "string", "input", "nullTerminated");
defineOutput(bladerf_load_fpgaDefinition, "RetVal", "int32");
validate(bladerf_load_fpgaDefinition);

%% C++ function |bladerf_flash_fpga| with MATLAB name |clib.libbladeRF.bladerf_flash_fpga|
% C++ Signature: int bladerf_flash_fpga(bladerf * dev,char const * fpga_image)
bladerf_flash_fpgaDefinition = addFunction(libDef, ...
    "int bladerf_flash_fpga(bladerf * dev,char const * fpga_image)", ...
    "MATLABName", "clib.libbladeRF.bladerf_flash_fpga", ...
    "Description", "clib.libbladeRF.bladerf_flash_fpga Representation of C++ function bladerf_flash_fpga."); % Modify help description values as needed.
defineArgument(bladerf_flash_fpgaDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_flash_fpgaDefinition, "fpga_image", "string", "input", "nullTerminated");
defineOutput(bladerf_flash_fpgaDefinition, "RetVal", "int32");
validate(bladerf_flash_fpgaDefinition);

%% C++ function |bladerf_erase_stored_fpga| with MATLAB name |clib.libbladeRF.bladerf_erase_stored_fpga|
% C++ Signature: int bladerf_erase_stored_fpga(bladerf * dev)
bladerf_erase_stored_fpgaDefinition = addFunction(libDef, ...
    "int bladerf_erase_stored_fpga(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_erase_stored_fpga", ...
    "Description", "clib.libbladeRF.bladerf_erase_stored_fpga Representation of C++ function bladerf_erase_stored_fpga."); % Modify help description values as needed.
defineArgument(bladerf_erase_stored_fpgaDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_erase_stored_fpgaDefinition, "RetVal", "int32");
validate(bladerf_erase_stored_fpgaDefinition);

%% C++ function |bladerf_device_reset| with MATLAB name |clib.libbladeRF.bladerf_device_reset|
% C++ Signature: int bladerf_device_reset(bladerf * dev)
bladerf_device_resetDefinition = addFunction(libDef, ...
    "int bladerf_device_reset(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_device_reset", ...
    "Description", "clib.libbladeRF.bladerf_device_reset Representation of C++ function bladerf_device_reset."); % Modify help description values as needed.
defineArgument(bladerf_device_resetDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_device_resetDefinition, "RetVal", "int32");
validate(bladerf_device_resetDefinition);

%% C++ function |bladerf_get_fw_log| with MATLAB name |clib.libbladeRF.bladerf_get_fw_log|
% C++ Signature: int bladerf_get_fw_log(bladerf * dev,char const * filename)
bladerf_get_fw_logDefinition = addFunction(libDef, ...
    "int bladerf_get_fw_log(bladerf * dev,char const * filename)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_fw_log", ...
    "Description", "clib.libbladeRF.bladerf_get_fw_log Representation of C++ function bladerf_get_fw_log."); % Modify help description values as needed.
defineArgument(bladerf_get_fw_logDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_get_fw_logDefinition, "filename", "string", "input", "nullTerminated");
defineOutput(bladerf_get_fw_logDefinition, "RetVal", "int32");
validate(bladerf_get_fw_logDefinition);

%% C++ function |bladerf_jump_to_bootloader| with MATLAB name |clib.libbladeRF.bladerf_jump_to_bootloader|
% C++ Signature: int bladerf_jump_to_bootloader(bladerf * dev)
bladerf_jump_to_bootloaderDefinition = addFunction(libDef, ...
    "int bladerf_jump_to_bootloader(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_jump_to_bootloader", ...
    "Description", "clib.libbladeRF.bladerf_jump_to_bootloader Representation of C++ function bladerf_jump_to_bootloader."); % Modify help description values as needed.
defineArgument(bladerf_jump_to_bootloaderDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_jump_to_bootloaderDefinition, "RetVal", "int32");
validate(bladerf_jump_to_bootloaderDefinition);

%% C++ function |bladerf_get_bootloader_list| with MATLAB name |clib.libbladeRF.bladerf_get_bootloader_list|
% C++ Signature: int bladerf_get_bootloader_list(bladerf_devinfo * * list)
bladerf_get_bootloader_listDefinition = addFunction(libDef, ...
    "int bladerf_get_bootloader_list(bladerf_devinfo * * list)", ...
    "MATLABName", "clib.libbladeRF.bladerf_get_bootloader_list", ...
    "Description", "clib.libbladeRF.bladerf_get_bootloader_list Representation of C++ function bladerf_get_bootloader_list."); % Modify help description values as needed.
defineArgument(bladerf_get_bootloader_listDefinition, "list", "clib.libbladeRF.bladerf_devinfo", "output", 1);
defineOutput(bladerf_get_bootloader_listDefinition, "RetVal", "int32");
validate(bladerf_get_bootloader_listDefinition);

%% C++ function |bladerf_load_fw_from_bootloader| with MATLAB name |clib.libbladeRF.bladerf_load_fw_from_bootloader|
% C++ Signature: int bladerf_load_fw_from_bootloader(char const * device_identifier,bladerf_backend backend,uint8_t bus,uint8_t addr,char const * file)
bladerf_load_fw_from_bootloaderDefinition = addFunction(libDef, ...
    "int bladerf_load_fw_from_bootloader(char const * device_identifier,bladerf_backend backend,uint8_t bus,uint8_t addr,char const * file)", ...
    "MATLABName", "clib.libbladeRF.bladerf_load_fw_from_bootloader", ...
    "Description", "clib.libbladeRF.bladerf_load_fw_from_bootloader Representation of C++ function bladerf_load_fw_from_bootloader."); % Modify help description values as needed.
defineArgument(bladerf_load_fw_from_bootloaderDefinition, "device_identifier", "string", "input", "nullTerminated");
defineArgument(bladerf_load_fw_from_bootloaderDefinition, "backend", "clib.libbladeRF.bladerf_backend");
defineArgument(bladerf_load_fw_from_bootloaderDefinition, "bus", "uint8");
defineArgument(bladerf_load_fw_from_bootloaderDefinition, "addr", "uint8");
defineArgument(bladerf_load_fw_from_bootloaderDefinition, "file", "string", "input", "nullTerminated");
defineOutput(bladerf_load_fw_from_bootloaderDefinition, "RetVal", "int32");
validate(bladerf_load_fw_from_bootloaderDefinition);

%% C++ function |bladerf_alloc_image| with MATLAB name |clib.libbladeRF.bladerf_alloc_image|
% C++ Signature: bladerf_image * bladerf_alloc_image(bladerf * dev,bladerf_image_type type,uint32_t address,uint32_t length)
bladerf_alloc_imageDefinition = addFunction(libDef, ...
    "bladerf_image * bladerf_alloc_image(bladerf * dev,bladerf_image_type type,uint32_t address,uint32_t length)", ...
    "MATLABName", "clib.libbladeRF.bladerf_alloc_image", ...
    "Description", "clib.libbladeRF.bladerf_alloc_image Representation of C++ function bladerf_alloc_image."); % Modify help description values as needed.
defineArgument(bladerf_alloc_imageDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_alloc_imageDefinition, "type", "clib.libbladeRF.bladerf_image_type");
defineArgument(bladerf_alloc_imageDefinition, "address", "uint32");
defineArgument(bladerf_alloc_imageDefinition, "length", "uint32");
defineOutput(bladerf_alloc_imageDefinition, "RetVal", "clib.libbladeRF.bladerf_image", 1);
validate(bladerf_alloc_imageDefinition);

%% C++ function |bladerf_alloc_cal_image| with MATLAB name |clib.libbladeRF.bladerf_alloc_cal_image|
% C++ Signature: bladerf_image * bladerf_alloc_cal_image(bladerf * dev,bladerf_fpga_size fpga_size,uint16_t vctcxo_trim)
bladerf_alloc_cal_imageDefinition = addFunction(libDef, ...
    "bladerf_image * bladerf_alloc_cal_image(bladerf * dev,bladerf_fpga_size fpga_size,uint16_t vctcxo_trim)", ...
    "MATLABName", "clib.libbladeRF.bladerf_alloc_cal_image", ...
    "Description", "clib.libbladeRF.bladerf_alloc_cal_image Representation of C++ function bladerf_alloc_cal_image."); % Modify help description values as needed.
defineArgument(bladerf_alloc_cal_imageDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_alloc_cal_imageDefinition, "fpga_size", "clib.libbladeRF.bladerf_fpga_size");
defineArgument(bladerf_alloc_cal_imageDefinition, "vctcxo_trim", "uint16");
defineOutput(bladerf_alloc_cal_imageDefinition, "RetVal", "clib.libbladeRF.bladerf_image", 1);
validate(bladerf_alloc_cal_imageDefinition);

%% C++ function |bladerf_free_image| with MATLAB name |clib.libbladeRF.bladerf_free_image|
% C++ Signature: void bladerf_free_image(bladerf_image * image)
bladerf_free_imageDefinition = addFunction(libDef, ...
    "void bladerf_free_image(bladerf_image * image)", ...
    "MATLABName", "clib.libbladeRF.bladerf_free_image", ...
    "Description", "clib.libbladeRF.bladerf_free_image Representation of C++ function bladerf_free_image."); % Modify help description values as needed.
defineArgument(bladerf_free_imageDefinition, "image", "clib.libbladeRF.bladerf_image", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_image", or "clib.array.libbladeRF.bladerf_image"
validate(bladerf_free_imageDefinition);

%% C++ function |bladerf_image_write| with MATLAB name |clib.libbladeRF.bladerf_image_write|
% C++ Signature: int bladerf_image_write(bladerf * dev,bladerf_image * image,char const * file)
bladerf_image_writeDefinition = addFunction(libDef, ...
    "int bladerf_image_write(bladerf * dev,bladerf_image * image,char const * file)", ...
    "MATLABName", "clib.libbladeRF.bladerf_image_write", ...
    "Description", "clib.libbladeRF.bladerf_image_write Representation of C++ function bladerf_image_write."); % Modify help description values as needed.
defineArgument(bladerf_image_writeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_image_writeDefinition, "image", "clib.libbladeRF.bladerf_image", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_image", or "clib.array.libbladeRF.bladerf_image"
defineArgument(bladerf_image_writeDefinition, "file", "string", "input", "nullTerminated");
defineOutput(bladerf_image_writeDefinition, "RetVal", "int32");
validate(bladerf_image_writeDefinition);

%% C++ function |bladerf_image_read| with MATLAB name |clib.libbladeRF.bladerf_image_read|
% C++ Signature: int bladerf_image_read(bladerf_image * image,char const * file)
bladerf_image_readDefinition = addFunction(libDef, ...
    "int bladerf_image_read(bladerf_image * image,char const * file)", ...
    "MATLABName", "clib.libbladeRF.bladerf_image_read", ...
    "Description", "clib.libbladeRF.bladerf_image_read Representation of C++ function bladerf_image_read."); % Modify help description values as needed.
defineArgument(bladerf_image_readDefinition, "image", "clib.libbladeRF.bladerf_image", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_image", or "clib.array.libbladeRF.bladerf_image"
defineArgument(bladerf_image_readDefinition, "file", "string", "input", "nullTerminated");
defineOutput(bladerf_image_readDefinition, "RetVal", "int32");
validate(bladerf_image_readDefinition);

%% C++ function |bladerf_set_vctcxo_tamer_mode| with MATLAB name |clib.libbladeRF.bladerf_set_vctcxo_tamer_mode|
% C++ Signature: int bladerf_set_vctcxo_tamer_mode(bladerf * dev,bladerf_vctcxo_tamer_mode mode)
bladerf_set_vctcxo_tamer_modeDefinition = addFunction(libDef, ...
    "int bladerf_set_vctcxo_tamer_mode(bladerf * dev,bladerf_vctcxo_tamer_mode mode)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_vctcxo_tamer_mode", ...
    "Description", "clib.libbladeRF.bladerf_set_vctcxo_tamer_mode Representation of C++ function bladerf_set_vctcxo_tamer_mode."); % Modify help description values as needed.
defineArgument(bladerf_set_vctcxo_tamer_modeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_vctcxo_tamer_modeDefinition, "mode", "clib.libbladeRF.bladerf_vctcxo_tamer_mode");
defineOutput(bladerf_set_vctcxo_tamer_modeDefinition, "RetVal", "int32");
validate(bladerf_set_vctcxo_tamer_modeDefinition);

%% C++ function |bladerf_get_vctcxo_trim| with MATLAB name |clib.libbladeRF.bladerf_get_vctcxo_trim|
% C++ Signature: int bladerf_get_vctcxo_trim(bladerf * dev,uint16_t * trim)
%bladerf_get_vctcxo_trimDefinition = addFunction(libDef, ...
%    "int bladerf_get_vctcxo_trim(bladerf * dev,uint16_t * trim)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_vctcxo_trim", ...
%    "Description", "clib.libbladeRF.bladerf_get_vctcxo_trim Representation of C++ function bladerf_get_vctcxo_trim."); % Modify help description values as needed.
%defineArgument(bladerf_get_vctcxo_trimDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_vctcxo_trimDefinition, "trim", "clib.array.libbladeRF.UnsignedShort", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedShort", or "uint16"
%defineOutput(bladerf_get_vctcxo_trimDefinition, "RetVal", "int32");
%validate(bladerf_get_vctcxo_trimDefinition);

%% C++ function |bladerf_trim_dac_write| with MATLAB name |clib.libbladeRF.bladerf_trim_dac_write|
% C++ Signature: int bladerf_trim_dac_write(bladerf * dev,uint16_t val)
bladerf_trim_dac_writeDefinition = addFunction(libDef, ...
    "int bladerf_trim_dac_write(bladerf * dev,uint16_t val)", ...
    "MATLABName", "clib.libbladeRF.bladerf_trim_dac_write", ...
    "Description", "clib.libbladeRF.bladerf_trim_dac_write Representation of C++ function bladerf_trim_dac_write."); % Modify help description values as needed.
defineArgument(bladerf_trim_dac_writeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_trim_dac_writeDefinition, "val", "uint16");
defineOutput(bladerf_trim_dac_writeDefinition, "RetVal", "int32");
validate(bladerf_trim_dac_writeDefinition);

%% C++ function |bladerf_trim_dac_read| with MATLAB name |clib.libbladeRF.bladerf_trim_dac_read|
% C++ Signature: int bladerf_trim_dac_read(bladerf * dev,uint16_t * val)
%bladerf_trim_dac_readDefinition = addFunction(libDef, ...
%    "int bladerf_trim_dac_read(bladerf * dev,uint16_t * val)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_trim_dac_read", ...
%    "Description", "clib.libbladeRF.bladerf_trim_dac_read Representation of C++ function bladerf_trim_dac_read."); % Modify help description values as needed.
%defineArgument(bladerf_trim_dac_readDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_trim_dac_readDefinition, "val", "clib.array.libbladeRF.UnsignedShort", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedShort", or "uint16"
%defineOutput(bladerf_trim_dac_readDefinition, "RetVal", "int32");
%validate(bladerf_trim_dac_readDefinition);

%% C++ function |bladerf_set_tuning_mode| with MATLAB name |clib.libbladeRF.bladerf_set_tuning_mode|
% C++ Signature: int bladerf_set_tuning_mode(bladerf * dev,bladerf_tuning_mode mode)
bladerf_set_tuning_modeDefinition = addFunction(libDef, ...
    "int bladerf_set_tuning_mode(bladerf * dev,bladerf_tuning_mode mode)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_tuning_mode", ...
    "Description", "clib.libbladeRF.bladerf_set_tuning_mode Representation of C++ function bladerf_set_tuning_mode."); % Modify help description values as needed.
defineArgument(bladerf_set_tuning_modeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_tuning_modeDefinition, "mode", "clib.libbladeRF.bladerf_tuning_mode");
defineOutput(bladerf_set_tuning_modeDefinition, "RetVal", "int32");
validate(bladerf_set_tuning_modeDefinition);

%% C++ function |bladerf_read_trigger| with MATLAB name |clib.libbladeRF.bladerf_read_trigger|
% C++ Signature: int bladerf_read_trigger(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,uint8_t * val)
%bladerf_read_triggerDefinition = addFunction(libDef, ...
%    "int bladerf_read_trigger(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,uint8_t * val)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_read_trigger", ...
%    "Description", "clib.libbladeRF.bladerf_read_trigger Representation of C++ function bladerf_read_trigger."); % Modify help description values as needed.
%defineArgument(bladerf_read_triggerDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_read_triggerDefinition, "ch", "int32");
%defineArgument(bladerf_read_triggerDefinition, "signal", "clib.libbladeRF.bladerf_trigger_signal");
%defineArgument(bladerf_read_triggerDefinition, "val", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineOutput(bladerf_read_triggerDefinition, "RetVal", "int32");
%validate(bladerf_read_triggerDefinition);

%% C++ function |bladerf_write_trigger| with MATLAB name |clib.libbladeRF.bladerf_write_trigger|
% C++ Signature: int bladerf_write_trigger(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,uint8_t val)
bladerf_write_triggerDefinition = addFunction(libDef, ...
    "int bladerf_write_trigger(bladerf * dev,bladerf_channel ch,bladerf_trigger_signal signal,uint8_t val)", ...
    "MATLABName", "clib.libbladeRF.bladerf_write_trigger", ...
    "Description", "clib.libbladeRF.bladerf_write_trigger Representation of C++ function bladerf_write_trigger."); % Modify help description values as needed.
defineArgument(bladerf_write_triggerDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_write_triggerDefinition, "ch", "int32");
defineArgument(bladerf_write_triggerDefinition, "signal", "clib.libbladeRF.bladerf_trigger_signal");
defineArgument(bladerf_write_triggerDefinition, "val", "uint8");
defineOutput(bladerf_write_triggerDefinition, "RetVal", "int32");
validate(bladerf_write_triggerDefinition);

%% C++ function |bladerf_wishbone_master_read| with MATLAB name |clib.libbladeRF.bladerf_wishbone_master_read|
% C++ Signature: int bladerf_wishbone_master_read(bladerf * dev,uint32_t addr,uint32_t * data)
%bladerf_wishbone_master_readDefinition = addFunction(libDef, ...
%    "int bladerf_wishbone_master_read(bladerf * dev,uint32_t addr,uint32_t * data)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_wishbone_master_read", ...
%    "Description", "clib.libbladeRF.bladerf_wishbone_master_read Representation of C++ function bladerf_wishbone_master_read."); % Modify help description values as needed.
%defineArgument(bladerf_wishbone_master_readDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_wishbone_master_readDefinition, "addr", "uint32");
%defineArgument(bladerf_wishbone_master_readDefinition, "data", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_wishbone_master_readDefinition, "RetVal", "int32");
%validate(bladerf_wishbone_master_readDefinition);

%% C++ function |bladerf_wishbone_master_write| with MATLAB name |clib.libbladeRF.bladerf_wishbone_master_write|
% C++ Signature: int bladerf_wishbone_master_write(bladerf * dev,uint32_t addr,uint32_t val)
bladerf_wishbone_master_writeDefinition = addFunction(libDef, ...
    "int bladerf_wishbone_master_write(bladerf * dev,uint32_t addr,uint32_t val)", ...
    "MATLABName", "clib.libbladeRF.bladerf_wishbone_master_write", ...
    "Description", "clib.libbladeRF.bladerf_wishbone_master_write Representation of C++ function bladerf_wishbone_master_write."); % Modify help description values as needed.
defineArgument(bladerf_wishbone_master_writeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_wishbone_master_writeDefinition, "addr", "uint32");
defineArgument(bladerf_wishbone_master_writeDefinition, "val", "uint32");
defineOutput(bladerf_wishbone_master_writeDefinition, "RetVal", "int32");
validate(bladerf_wishbone_master_writeDefinition);

%% C++ function |bladerf_config_gpio_read| with MATLAB name |clib.libbladeRF.bladerf_config_gpio_read|
% C++ Signature: int bladerf_config_gpio_read(bladerf * dev,uint32_t * val)
%bladerf_config_gpio_readDefinition = addFunction(libDef, ...
%    "int bladerf_config_gpio_read(bladerf * dev,uint32_t * val)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_config_gpio_read", ...
%    "Description", "clib.libbladeRF.bladerf_config_gpio_read Representation of C++ function bladerf_config_gpio_read."); % Modify help description values as needed.
%defineArgument(bladerf_config_gpio_readDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_config_gpio_readDefinition, "val", "clib.array.libbladeRF.UnsignedInt", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedInt", or "uint32"
%defineOutput(bladerf_config_gpio_readDefinition, "RetVal", "int32");
%validate(bladerf_config_gpio_readDefinition);

%% C++ function |bladerf_config_gpio_write| with MATLAB name |clib.libbladeRF.bladerf_config_gpio_write|
% C++ Signature: int bladerf_config_gpio_write(bladerf * dev,uint32_t val)
bladerf_config_gpio_writeDefinition = addFunction(libDef, ...
    "int bladerf_config_gpio_write(bladerf * dev,uint32_t val)", ...
    "MATLABName", "clib.libbladeRF.bladerf_config_gpio_write", ...
    "Description", "clib.libbladeRF.bladerf_config_gpio_write Representation of C++ function bladerf_config_gpio_write."); % Modify help description values as needed.
defineArgument(bladerf_config_gpio_writeDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_config_gpio_writeDefinition, "val", "uint32");
defineOutput(bladerf_config_gpio_writeDefinition, "RetVal", "int32");
validate(bladerf_config_gpio_writeDefinition);

%% C++ function |bladerf_erase_flash| with MATLAB name |clib.libbladeRF.bladerf_erase_flash|
% C++ Signature: int bladerf_erase_flash(bladerf * dev,uint32_t erase_block,uint32_t count)
bladerf_erase_flashDefinition = addFunction(libDef, ...
    "int bladerf_erase_flash(bladerf * dev,uint32_t erase_block,uint32_t count)", ...
    "MATLABName", "clib.libbladeRF.bladerf_erase_flash", ...
    "Description", "clib.libbladeRF.bladerf_erase_flash Representation of C++ function bladerf_erase_flash."); % Modify help description values as needed.
defineArgument(bladerf_erase_flashDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_erase_flashDefinition, "erase_block", "uint32");
defineArgument(bladerf_erase_flashDefinition, "count", "uint32");
defineOutput(bladerf_erase_flashDefinition, "RetVal", "int32");
validate(bladerf_erase_flashDefinition);

%% C++ function |bladerf_erase_flash_bytes| with MATLAB name |clib.libbladeRF.bladerf_erase_flash_bytes|
% C++ Signature: int bladerf_erase_flash_bytes(bladerf * dev,uint32_t address,uint32_t length)
bladerf_erase_flash_bytesDefinition = addFunction(libDef, ...
    "int bladerf_erase_flash_bytes(bladerf * dev,uint32_t address,uint32_t length)", ...
    "MATLABName", "clib.libbladeRF.bladerf_erase_flash_bytes", ...
    "Description", "clib.libbladeRF.bladerf_erase_flash_bytes Representation of C++ function bladerf_erase_flash_bytes."); % Modify help description values as needed.
defineArgument(bladerf_erase_flash_bytesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_erase_flash_bytesDefinition, "address", "uint32");
defineArgument(bladerf_erase_flash_bytesDefinition, "length", "uint32");
defineOutput(bladerf_erase_flash_bytesDefinition, "RetVal", "int32");
validate(bladerf_erase_flash_bytesDefinition);

%% C++ function |bladerf_read_flash| with MATLAB name |clib.libbladeRF.bladerf_read_flash|
% C++ Signature: int bladerf_read_flash(bladerf * dev,uint8_t * buf,uint32_t page,uint32_t count)
%bladerf_read_flashDefinition = addFunction(libDef, ...
%    "int bladerf_read_flash(bladerf * dev,uint8_t * buf,uint32_t page,uint32_t count)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_read_flash", ...
%    "Description", "clib.libbladeRF.bladerf_read_flash Representation of C++ function bladerf_read_flash."); % Modify help description values as needed.
%defineArgument(bladerf_read_flashDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_read_flashDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineArgument(bladerf_read_flashDefinition, "page", "uint32");
%defineArgument(bladerf_read_flashDefinition, "count", "uint32");
%defineOutput(bladerf_read_flashDefinition, "RetVal", "int32");
%validate(bladerf_read_flashDefinition);

%% C++ function |bladerf_read_flash_bytes| with MATLAB name |clib.libbladeRF.bladerf_read_flash_bytes|
% C++ Signature: int bladerf_read_flash_bytes(bladerf * dev,uint8_t * buf,uint32_t address,uint32_t bytes)
%bladerf_read_flash_bytesDefinition = addFunction(libDef, ...
%    "int bladerf_read_flash_bytes(bladerf * dev,uint8_t * buf,uint32_t address,uint32_t bytes)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_read_flash_bytes", ...
%    "Description", "clib.libbladeRF.bladerf_read_flash_bytes Representation of C++ function bladerf_read_flash_bytes."); % Modify help description values as needed.
%defineArgument(bladerf_read_flash_bytesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_read_flash_bytesDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineArgument(bladerf_read_flash_bytesDefinition, "address", "uint32");
%defineArgument(bladerf_read_flash_bytesDefinition, "bytes", "uint32");
%defineOutput(bladerf_read_flash_bytesDefinition, "RetVal", "int32");
%validate(bladerf_read_flash_bytesDefinition);

%% C++ function |bladerf_write_flash| with MATLAB name |clib.libbladeRF.bladerf_write_flash|
% C++ Signature: int bladerf_write_flash(bladerf * dev,uint8_t const * buf,uint32_t page,uint32_t count)
%bladerf_write_flashDefinition = addFunction(libDef, ...
%    "int bladerf_write_flash(bladerf * dev,uint8_t const * buf,uint32_t page,uint32_t count)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_write_flash", ...
%    "Description", "clib.libbladeRF.bladerf_write_flash Representation of C++ function bladerf_write_flash."); % Modify help description values as needed.
%defineArgument(bladerf_write_flashDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_write_flashDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineArgument(bladerf_write_flashDefinition, "page", "uint32");
%defineArgument(bladerf_write_flashDefinition, "count", "uint32");
%defineOutput(bladerf_write_flashDefinition, "RetVal", "int32");
%validate(bladerf_write_flashDefinition);

%% C++ function |bladerf_write_flash_bytes| with MATLAB name |clib.libbladeRF.bladerf_write_flash_bytes|
% C++ Signature: int bladerf_write_flash_bytes(bladerf * dev,uint8_t const * buf,uint32_t address,uint32_t length)
%bladerf_write_flash_bytesDefinition = addFunction(libDef, ...
%    "int bladerf_write_flash_bytes(bladerf * dev,uint8_t const * buf,uint32_t address,uint32_t length)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_write_flash_bytes", ...
%    "Description", "clib.libbladeRF.bladerf_write_flash_bytes Representation of C++ function bladerf_write_flash_bytes."); % Modify help description values as needed.
%defineArgument(bladerf_write_flash_bytesDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_write_flash_bytesDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineArgument(bladerf_write_flash_bytesDefinition, "address", "uint32");
%defineArgument(bladerf_write_flash_bytesDefinition, "length", "uint32");
%defineOutput(bladerf_write_flash_bytesDefinition, "RetVal", "int32");
%validate(bladerf_write_flash_bytesDefinition);

%% C++ function |bladerf_lock_otp| with MATLAB name |clib.libbladeRF.bladerf_lock_otp|
% C++ Signature: int bladerf_lock_otp(bladerf * dev)
bladerf_lock_otpDefinition = addFunction(libDef, ...
    "int bladerf_lock_otp(bladerf * dev)", ...
    "MATLABName", "clib.libbladeRF.bladerf_lock_otp", ...
    "Description", "clib.libbladeRF.bladerf_lock_otp Representation of C++ function bladerf_lock_otp."); % Modify help description values as needed.
defineArgument(bladerf_lock_otpDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineOutput(bladerf_lock_otpDefinition, "RetVal", "int32");
validate(bladerf_lock_otpDefinition);

%% C++ function |bladerf_read_otp| with MATLAB name |clib.libbladeRF.bladerf_read_otp|
% C++ Signature: int bladerf_read_otp(bladerf * dev,uint8_t * buf)
%bladerf_read_otpDefinition = addFunction(libDef, ...
%    "int bladerf_read_otp(bladerf * dev,uint8_t * buf)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_read_otp", ...
%    "Description", "clib.libbladeRF.bladerf_read_otp Representation of C++ function bladerf_read_otp."); % Modify help description values as needed.
%defineArgument(bladerf_read_otpDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_read_otpDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineOutput(bladerf_read_otpDefinition, "RetVal", "int32");
%validate(bladerf_read_otpDefinition);

%% C++ function |bladerf_write_otp| with MATLAB name |clib.libbladeRF.bladerf_write_otp|
% C++ Signature: int bladerf_write_otp(bladerf * dev,uint8_t * buf)
%bladerf_write_otpDefinition = addFunction(libDef, ...
%    "int bladerf_write_otp(bladerf * dev,uint8_t * buf)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_write_otp", ...
%    "Description", "clib.libbladeRF.bladerf_write_otp Representation of C++ function bladerf_write_otp."); % Modify help description values as needed.
%defineArgument(bladerf_write_otpDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_write_otpDefinition, "buf", "clib.array.libbladeRF.UnsignedChar", "input", <SHAPE>); % <MLTYPE> can be "clib.array.libbladeRF.UnsignedChar", or "uint8"
%defineOutput(bladerf_write_otpDefinition, "RetVal", "int32");
%validate(bladerf_write_otpDefinition);

%% C++ function |bladerf_set_rf_port| with MATLAB name |clib.libbladeRF.bladerf_set_rf_port|
% C++ Signature: int bladerf_set_rf_port(bladerf * dev,bladerf_channel ch,char const * port)
bladerf_set_rf_portDefinition = addFunction(libDef, ...
    "int bladerf_set_rf_port(bladerf * dev,bladerf_channel ch,char const * port)", ...
    "MATLABName", "clib.libbladeRF.bladerf_set_rf_port", ...
    "Description", "clib.libbladeRF.bladerf_set_rf_port Representation of C++ function bladerf_set_rf_port."); % Modify help description values as needed.
defineArgument(bladerf_set_rf_portDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_set_rf_portDefinition, "ch", "int32");
defineArgument(bladerf_set_rf_portDefinition, "port", "string", "input", "nullTerminated");
defineOutput(bladerf_set_rf_portDefinition, "RetVal", "int32");
validate(bladerf_set_rf_portDefinition);

%% C++ function |bladerf_get_rf_port| with MATLAB name |clib.libbladeRF.bladerf_get_rf_port|
% C++ Signature: int bladerf_get_rf_port(bladerf * dev,bladerf_channel ch,char const * * port)
%bladerf_get_rf_portDefinition = addFunction(libDef, ...
%    "int bladerf_get_rf_port(bladerf * dev,bladerf_channel ch,char const * * port)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_rf_port", ...
%    "Description", "clib.libbladeRF.bladerf_get_rf_port Representation of C++ function bladerf_get_rf_port."); % Modify help description values as needed.
%defineArgument(bladerf_get_rf_portDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_rf_portDefinition, "ch", "int32");
%defineArgument(bladerf_get_rf_portDefinition, "port", "string", "input", {<SHAPE>, "nullTerminated"});
%defineOutput(bladerf_get_rf_portDefinition, "RetVal", "int32");
%validate(bladerf_get_rf_portDefinition);

%% C++ function |bladerf_get_rf_ports| with MATLAB name |clib.libbladeRF.bladerf_get_rf_ports|
% C++ Signature: int bladerf_get_rf_ports(bladerf * dev,bladerf_channel ch,char const * * ports,unsigned int count)
%bladerf_get_rf_portsDefinition = addFunction(libDef, ...
%    "int bladerf_get_rf_ports(bladerf * dev,bladerf_channel ch,char const * * ports,unsigned int count)", ...
%    "MATLABName", "clib.libbladeRF.bladerf_get_rf_ports", ...
%    "Description", "clib.libbladeRF.bladerf_get_rf_ports Representation of C++ function bladerf_get_rf_ports."); % Modify help description values as needed.
%defineArgument(bladerf_get_rf_portsDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
%defineArgument(bladerf_get_rf_portsDefinition, "ch", "int32");
%defineArgument(bladerf_get_rf_portsDefinition, "ports", "string", "input", {<SHAPE>, "nullTerminated"});
%defineArgument(bladerf_get_rf_portsDefinition, "count", "uint32");
%defineOutput(bladerf_get_rf_portsDefinition, "RetVal", "int32");
%validate(bladerf_get_rf_portsDefinition);

%% C++ function |bladerf_expansion_attach| with MATLAB name |clib.libbladeRF.bladerf_expansion_attach|
% C++ Signature: int bladerf_expansion_attach(bladerf * dev,bladerf_xb xb)
bladerf_expansion_attachDefinition = addFunction(libDef, ...
    "int bladerf_expansion_attach(bladerf * dev,bladerf_xb xb)", ...
    "MATLABName", "clib.libbladeRF.bladerf_expansion_attach", ...
    "Description", "clib.libbladeRF.bladerf_expansion_attach Representation of C++ function bladerf_expansion_attach."); % Modify help description values as needed.
defineArgument(bladerf_expansion_attachDefinition, "dev", "clib.libbladeRF.bladerf", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf", or "clib.array.libbladeRF.bladerf"
defineArgument(bladerf_expansion_attachDefinition, "xb", "clib.libbladeRF.bladerf_xb");
defineOutput(bladerf_expansion_attachDefinition, "RetVal", "int32");
validate(bladerf_expansion_attachDefinition);

%% C++ function |bladerf_log_set_verbosity| with MATLAB name |clib.libbladeRF.bladerf_log_set_verbosity|
% C++ Signature: void bladerf_log_set_verbosity(bladerf_log_level level)
bladerf_log_set_verbosityDefinition = addFunction(libDef, ...
    "void bladerf_log_set_verbosity(bladerf_log_level level)", ...
    "MATLABName", "clib.libbladeRF.bladerf_log_set_verbosity", ...
    "Description", "clib.libbladeRF.bladerf_log_set_verbosity Representation of C++ function bladerf_log_set_verbosity."); % Modify help description values as needed.
defineArgument(bladerf_log_set_verbosityDefinition, "level", "clib.libbladeRF.bladerf_log_level");
validate(bladerf_log_set_verbosityDefinition);

%% C++ function |bladerf_version| with MATLAB name |clib.libbladeRF.bladerf_version|
% C++ Signature: void bladerf_version(bladerf_version * version)
bladerf_versionDefinition = addFunction(libDef, ...
    "void bladerf_version(bladerf_version * version)", ...
    "MATLABName", "clib.libbladeRF.bladerf_version", ...
    "Description", "clib.libbladeRF.bladerf_version Representation of C++ function bladerf_version."); % Modify help description values as needed.
defineArgument(bladerf_versionDefinition, "version", "clib.libbladeRF.bladerf_version", "input", 1); % <MLTYPE> can be "clib.libbladeRF.bladerf_version", or "clib.array.libbladeRF.bladerf_version"
validate(bladerf_versionDefinition);

%% C++ function |bladerf_strerror| with MATLAB name |clib.libbladeRF.bladerf_strerror|
% C++ Signature: char const * bladerf_strerror(int error)
bladerf_strerrorDefinition = addFunction(libDef, ...
    "char const * bladerf_strerror(int error)", ...
    "MATLABName", "clib.libbladeRF.bladerf_strerror", ...
    "Description", "clib.libbladeRF.bladerf_strerror Representation of C++ function bladerf_strerror."); % Modify help description values as needed.
defineArgument(bladerf_strerrorDefinition, "error", "int32");
defineOutput(bladerf_strerrorDefinition, "RetVal", "string", "nullTerminated");
validate(bladerf_strerrorDefinition);

%% Validate the library definition
validate(libDef);

end
